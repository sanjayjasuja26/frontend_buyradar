import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { loginThunk, registerThunk, forgotPasswordThunk, resetPasswordThunk, logoutThunk, getAllCurrenciesThunk, updateUserCurrencyThunk } from "./authThunks"

export interface AuthState {
  // login 
  isLoggedIn: boolean;
  isLoggingStatus: 'idle' | 'loading' | 'failed';
  isLoggingError: boolean;
  loggingErrorMsg: string;
  user: any;

  // register
  isRegisterStatus: 'idle' | 'loading' | 'failed';
  isRegisterError: boolean;
  registerErrorMsg: string;
  isRegisterSuccess: boolean;

  // forgotpassword
  forgotPasswordStatus: 'idle' | 'loading' | 'failed';
  isForgotPasswordError: boolean;
  forgotPasswordErrorMsg: string;
  isForgotPasswordSuccess: boolean;

  // reset password
  resetPasswordStatus: 'idle' | 'loading' | 'failed';
  isResetPasswordError: boolean;
  resetPasswordErrorMsg: string;
  isResetPasswordSuccess: boolean;

  // currency
  allCurrencies: any;
  selectedCurrency: {};
  currencyStatus: "idle" | "loading" | "failed";
  updateCurrencyStatus: "idle" | "loading" | "failed";
}

const initialState: AuthState = {
  isLoggedIn: false,
  isLoggingStatus: 'idle',
  isLoggingError: false,
  loggingErrorMsg: '',
  user: null,

  // register
  isRegisterSuccess: false,
  isRegisterStatus: 'idle',
  isRegisterError: false,
  registerErrorMsg: '',

  // forgotpassword
  forgotPasswordStatus: 'idle',
  isForgotPasswordError: false,
  forgotPasswordErrorMsg: "",
  isForgotPasswordSuccess: false,

  // reset password
  resetPasswordStatus: 'idle',
  isResetPasswordError: false,
  resetPasswordErrorMsg: "",
  isResetPasswordSuccess: false,

  // currency
  allCurrencies: {},
  selectedCurrency: {},
  currencyStatus: "idle",
  updateCurrencyStatus: "idle"
};

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    refreshErrorMsgs: (state) => {
      state.registerErrorMsg = ""
      state.loggingErrorMsg = ""
      state.isLoggingError = false
      state.isRegisterError = false
      state.isForgotPasswordError = false
      state.isForgotPasswordSuccess = false
      state.isResetPasswordError = false
      state.isResetPasswordSuccess = false
      state.resetPasswordErrorMsg = ""
      state.isResetPasswordSuccess = false
      state.isResetPasswordError = false
    },
    setUserFromSession: (state, action: PayloadAction<any>) => {
      state.user = action.payload
      state.isLoggedIn = true
    },
    removeUser: (state) => {
      state.user = null
      state.isLoggedIn = false
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // login
      .addCase(loginThunk.pending, (state) => {
        state.isLoggingStatus = 'loading';
        state.isLoggingError = false
        state.isLoggedIn = false
      })
      .addCase(loginThunk.fulfilled, (state, action) => {
        state.isLoggingStatus = 'idle'
        state.loggingErrorMsg = ""
        state.isLoggedIn = true
        state.user = action.payload
      })
      .addCase(loginThunk.rejected, (state, action) => {
        state.loggingErrorMsg = action?.error?.message ? action.error.message : ""
        state.isLoggingStatus = "failed"
        state.isLoggingError = true
        state.isLoggedIn = false
      })
      // register
      .addCase(registerThunk.pending, (state) => {
        state.isRegisterStatus = 'loading';
        state.isRegisterError = false
        state.isRegisterSuccess = false
      })
      .addCase(registerThunk.fulfilled, (state, action) => {
        state.isRegisterStatus = 'idle'
        state.registerErrorMsg = "Registered successfully. Verification link is sent to registered email. Please verify your email to login."
        state.isRegisterSuccess = true
        state.isRegisterError = false
      })
      .addCase(registerThunk.rejected, (state, action) => {
        state.registerErrorMsg = action?.error?.message ? action.error.message : ""
        state.isRegisterStatus = "failed"
        state.isRegisterError = true
        state.isRegisterSuccess = false
      })
      // forgotpassowrd
      .addCase(forgotPasswordThunk.pending, (state) => {
        state.forgotPasswordStatus = 'loading';
        state.isForgotPasswordError = false
        state.isForgotPasswordSuccess = false
      })
      .addCase(forgotPasswordThunk.fulfilled, (state, action) => {
        state.forgotPasswordStatus = 'idle'
        state.forgotPasswordErrorMsg = action.payload.message
        state.isForgotPasswordSuccess = true
        state.isForgotPasswordError = false
      })
      .addCase(forgotPasswordThunk.rejected, (state, action) => {
        state.forgotPasswordErrorMsg = action?.error?.message ? action.error.message : ""
        state.forgotPasswordStatus = "failed"
        state.isForgotPasswordError = true
        state.isForgotPasswordSuccess = false
      })
      // reset password
      .addCase(resetPasswordThunk.pending, (state) => {
        state.resetPasswordStatus = 'loading';
        state.isResetPasswordError = false
        state.isResetPasswordSuccess = false
      })
      .addCase(resetPasswordThunk.fulfilled, (state, action) => {
        state.resetPasswordStatus = 'idle'
        state.resetPasswordErrorMsg = action.payload.message
        state.isResetPasswordSuccess = true
        state.isResetPasswordError = false
      })
      .addCase(resetPasswordThunk.rejected, (state, action) => {
        state.resetPasswordErrorMsg = action?.error?.message ? action.error.message : ""
        state.resetPasswordStatus = "failed"
        state.isResetPasswordError = true
        state.isResetPasswordSuccess = false
      })
      // Logout
      .addCase(logoutThunk.fulfilled, (state, action) => {
        state.user = null
        state.isLoggedIn = false
      })
      // getAllCurrencies
      .addCase(getAllCurrenciesThunk.pending, (state) => {
        state.currencyStatus = 'loading';
      })
      .addCase(getAllCurrenciesThunk.fulfilled, (state, action) => {
        state.currencyStatus = "idle";
        state.allCurrencies = action.payload.currencies
      })
      .addCase(getAllCurrenciesThunk.rejected, (state, action) => {
        state.currencyStatus = "failed";
      })
      // updateUserCurrencyThunk
      .addCase(updateUserCurrencyThunk.pending, (state, action) => {
        console.log("selected_currency action", action)
        state.updateCurrencyStatus = 'loading';
        state.user.selected_currency = action.meta.arg.selected_currency;
        state.selectedCurrency = action.meta.arg.selected_currency;
      })
      .addCase(updateUserCurrencyThunk.fulfilled, (state, action) => {
        state.updateCurrencyStatus = "idle";

      })
      .addCase(updateUserCurrencyThunk.rejected, (state, action) => {
        state.updateCurrencyStatus = "failed";
      })
  },
});

export const { refreshErrorMsgs, setUserFromSession, removeUser } = authSlice.actions;
export default authSlice.reducer;
