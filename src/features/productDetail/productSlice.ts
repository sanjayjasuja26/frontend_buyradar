import { createSlice } from "@reduxjs/toolkit";
import { toast } from "react-toastify";
import { ProductInterface } from "types";
import {
  merchantListThunk,
  productDetailAfterSetProrityThunk,
  productDetailThunk,
  recommendedProductsThunk,
  similarProductsThunk,
  targetPriceThunk,
  inCorrectPriceThunk
} from "./productThunks";

export interface productState {
  // product detail
  productDetailStatus: "idle" | "loading" | "failed";
  isProductDetailError: boolean;
  productDetailErrorMsg: string;
  productDetail: any;

  // merchant list
  merchantsStatus: "idle" | "loading" | "failed";
  isMerchantsError: boolean;
  merchantsErrorMsg: string;
  merchants: any[];
  merchantsPageTotal: number;
  currentMerchantsPage: number;
  viewMoreMerchants: boolean;
  isMoreMerchants: boolean;
  merchantListLimit: number;
  merchantTotalRecords: number;

  // similar products
  similarProductsStatus: "idle" | "loading" | "failed";
  isSimilarProductsError: boolean;
  similarProductsErrorMsg: string;
  similarProducts: ProductInterface[];
  similarProductsPageTotal: number;
  currentSimilarProductsPage: number;
  viewMoreSimilarProducts: boolean;
  isMoreSimilarProducts: boolean;

  // recommended products
  recommendedProductsStatus: "idle" | "loading" | "failed";
  isRecommendedProductsError: boolean;
  recommendedProductsErrorMsg: string;
  recommendedProducts: ProductInterface[];
  recommendedProductsPageTotal: number;
  currentRecommendedProductsPage: number;
  viewMoreRecommendedProducts: boolean;
  isMoreRecommendedProducts: boolean;

  // target price
  targetPriceStatus: "idle" | "loading" | "failed";
  isTargetPriceError: boolean;
  targetPriceErrorMsg: string;
  targetPrice: any;

  // Incorrect price
  inCorrectPriceStatus: "idle" | "loading" | "failed";
  isIncorrectPriceError: boolean;
  inCorrectPriceErrorMsg: string;
  inCorrectPrice: any;


}

const initialState: productState = {
  productDetailStatus: "idle",
  isProductDetailError: false,
  productDetailErrorMsg: "",
  productDetail: {},

  merchantsStatus: "idle",
  isMerchantsError: false,
  merchantsErrorMsg: "",
  merchants: [],
  merchantsPageTotal: 1,
  currentMerchantsPage: 1,
  viewMoreMerchants: false,
  isMoreMerchants: false,
  merchantListLimit: 5,
  merchantTotalRecords: 0,

  // similarProductsStatus: "idle",
  similarProductsStatus: "loading",
  isSimilarProductsError: false,
  similarProductsErrorMsg: "",
  similarProducts: [],
  similarProductsPageTotal: 1,
  currentSimilarProductsPage: 1,
  viewMoreSimilarProducts: false,
  isMoreSimilarProducts: false,

  recommendedProductsStatus: "idle",
  isRecommendedProductsError: false,
  recommendedProductsErrorMsg: "",
  recommendedProducts: [],
  recommendedProductsPageTotal: 1,
  currentRecommendedProductsPage: 1,
  viewMoreRecommendedProducts: false,
  isMoreRecommendedProducts: false,

  targetPriceStatus: "idle",
  isTargetPriceError: false,
  targetPriceErrorMsg: "",
  targetPrice: {},

  // Incorrect price
  inCorrectPriceStatus: "idle",
  isIncorrectPriceError: false,
  inCorrectPriceErrorMsg: "",
  inCorrectPrice: {}
};

export const productSlice = createSlice({
  name: "product",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateViewMoreMerchants: (state) => {
      state.viewMoreMerchants = true;
      state.currentMerchantsPage = state.currentMerchantsPage + 1;
    },
    updateViewMoreRecommendedPrducts: (state) => {
      state.viewMoreRecommendedProducts = true;
      state.currentRecommendedProductsPage =
        state.currentRecommendedProductsPage + 1;
    },
    updateViewMoreSimilarPrducts: (state) => {
      state.viewMoreSimilarProducts = true;
      state.currentSimilarProductsPage = state.currentSimilarProductsPage + 1;
    },
    updateIsWishlist: (state, action) => {
      const { isWishlist } = action.payload;
      console.log("@updateIsWishlist", action.payload);

      state.productDetail = { ...state.productDetail, isWishlist: isWishlist };

      let index = state.recommendedProducts.findIndex(
        (i: any) => i.id === action.payload.id
      );
      console.log("index ======", index);
      if (index > -1) {
        state.recommendedProducts[index].isWishlist = action.payload.isWishlist;
      }
    },
    // toggle similarProducts loader state for sake of resultNumber calculations
    toggleSimilarProductsStatus: (state) => {
      state.similarProductsStatus = "loading";
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // home feed
      .addCase(productDetailThunk.pending, (state) => {
        state.productDetailStatus = "loading";
        state.isProductDetailError = false;
        state.productDetail = {};
      })
      .addCase(productDetailThunk.fulfilled, (state, action) => {
        state.productDetailStatus = "idle";
        state.productDetail = action.payload;
        state.productDetailErrorMsg = "";
      })
      .addCase(productDetailThunk.rejected, (state, action) => {
        state.productDetailErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.productDetailStatus = "failed";
        state.isProductDetailError = true;
        state.productDetail = {};
      })
      .addCase(productDetailAfterSetProrityThunk.fulfilled, (state, action) => {
        if (
          action.payload.minPrice !== state.productDetail.minPrice ||
          action.payload.maxPrice !== state.productDetail.maxPrice
        ) {
          state.productDetail = action.payload;
        }
        // state.productDetailStatus = "idle";
        // state.productDetail = action.payload;
        // state.productDetailErrorMsg = "";
      })
      // product merchants
      .addCase(merchantListThunk.pending, (state) => {
        state.isMerchantsError = false;
        if (!state.viewMoreMerchants) {
          state.merchantsStatus = "loading";
          state.merchants = [];
          state.currentMerchantsPage = 1;
        }
      })
      .addCase(merchantListThunk.fulfilled, (state, action) => {
        const { merchantsProduct } = action.payload;
        state.merchantsStatus = "idle";
        state.merchants = merchantsProduct.data;
        state.currentMerchantsPage = merchantsProduct.current_page;
        state.merchantsPageTotal = merchantsProduct.last_page;
        state.merchantTotalRecords = merchantsProduct.total;
        state.viewMoreMerchants = false;
        state.merchantsErrorMsg = "";
      })
      .addCase(merchantListThunk.rejected, (state, action) => {
        state.merchantsErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.merchantsStatus = "failed";
        state.isMerchantsError = true;
        state.merchants = [];
      })
      // similar Products
      .addCase(similarProductsThunk.pending, (state) => {
        state.isSimilarProductsError = false;
        if (!state.viewMoreSimilarProducts) {
          state.similarProductsStatus = "loading";
          state.similarProducts = [];
          state.currentSimilarProductsPage = 1;
        }
      })
      .addCase(similarProductsThunk.fulfilled, (state, action) => {
        const { products } = action.payload;
        state.similarProductsStatus = "idle";
        state.similarProducts = state.similarProducts.concat(products.data);
        state.currentSimilarProductsPage = products.current_page;
        state.similarProductsPageTotal = products.last_page;
        state.viewMoreSimilarProducts = false;
        state.similarProductsErrorMsg = "";
      })
      .addCase(similarProductsThunk.rejected, (state, action) => {
        state.similarProductsErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.similarProductsStatus = "failed";
        state.isSimilarProductsError = true;
        state.similarProducts = [];
      })
      // recommended Products
      .addCase(recommendedProductsThunk.pending, (state) => {
        state.isRecommendedProductsError = false;
        if (!state.viewMoreRecommendedProducts) {
          state.recommendedProductsStatus = "loading";
          state.recommendedProducts = [];
          state.currentRecommendedProductsPage = 1;
        }
      })
      .addCase(recommendedProductsThunk.fulfilled, (state, action) => {
        const { products } = action.payload;
        state.recommendedProductsStatus = "idle";
        state.recommendedProducts = state.recommendedProducts.concat(
          products.data
        );
        state.currentRecommendedProductsPage = products.current_page;
        state.recommendedProductsPageTotal = products.last_page;
        state.viewMoreRecommendedProducts = false;
        state.recommendedProductsErrorMsg = "";
      })
      .addCase(recommendedProductsThunk.rejected, (state, action) => {
        state.recommendedProductsErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.recommendedProductsStatus = "failed";
        state.isRecommendedProductsError = true;
        state.recommendedProducts = [];
      })
      // target price
      .addCase(targetPriceThunk.pending, (state) => {
        state.targetPriceStatus = "loading";
        state.isTargetPriceError = false;
      })
      .addCase(targetPriceThunk.fulfilled, (state, action) => {
        state.targetPriceStatus = "idle";
        state.targetPrice = action.payload;
        state.targetPriceErrorMsg = "";
      })
      .addCase(targetPriceThunk.rejected, (state, action) => {
        state.targetPriceErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.targetPriceStatus = "failed";
        state.isTargetPriceError = true;
      })
      //Incorrect Price
      .addCase(inCorrectPriceThunk.pending, (state) => {
        state.inCorrectPriceStatus = "loading";
        state.isIncorrectPriceError = false;
      })
      .addCase(inCorrectPriceThunk.fulfilled, (state, action) => {
        state.inCorrectPriceStatus = "idle";
        state.inCorrectPrice = action.payload;
        state.inCorrectPriceErrorMsg = "";
      })
      .addCase(inCorrectPriceThunk.rejected, (state, action) => {
        state.inCorrectPriceErrorMsg = action?.error?.message
          ? action.error.message
          : "";
        state.inCorrectPriceStatus = "failed";
        state.isIncorrectPriceError = true;
      });
  },
});
export const {
  updateIsWishlist,
  updateViewMoreMerchants,
  updateViewMoreRecommendedPrducts,
  updateViewMoreSimilarPrducts,
  toggleSimilarProductsStatus,
} = productSlice.actions;
export default productSlice.reducer;
