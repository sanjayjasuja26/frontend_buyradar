{"version":3,"file":"static/js/account-address.36315372.chunk.js","mappings":"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","sources":["features/userAccount/components/Sections/Address/AddAddressForm.tsx","features/userAccount/components/Sections/Address/index.tsx","globalComponents/loaders/index.tsx","utils/validations.ts"],"sourcesContent":["import { Link } from \"globalComponents/elements\";\nimport { Formik, Form } from \"formik\";\nimport React from \"react\";\nimport { addAddressSchema } from \"utils/validations\";\nimport { isNumberKey } from \"utils/helpers\";\nimport { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { userSelector } from \"features/userAccount/userSelectors\";\nimport { ButtonLoader } from \"globalComponents/loaders\";\nimport { addAddressThunk } from \"features/userAccount/userThunks\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { useTranslation } from \"react-i18next\";\n\nconst AddAddressForm: React.FC = () => {\n  const { addressErrorMsg, addressStatus } = useAppSelector(userSelector);\n  const dispatch = useAppDispatch();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"login-lft\">\n      <h3 className=\"login-hdng\">\n        {t(\"account.addressBook.fillDetailsForYourHomeAddress\")}\n      </h3>\n      <Formik\n        initialValues={{\n          address: \"\",\n          address_city: \"\",\n          address_province: \"\",\n          address_zip_code: \"\",\n          // default_billing: 0,\n          // default_shipping: 1,\n          full_name: \"\",\n          phone: \"\",\n          country_code: \"\",\n        }}\n        validateOnChange={true}\n        validationSchema={addAddressSchema}\n        onSubmit={async (values, { resetForm }) => {\n          const res = await dispatch(\n            addAddressThunk({\n              body: values,\n            })\n          );\n\n          if (res.payload.status_code === 200) {\n            resetForm();\n          }\n        }}\n      >\n        {({\n          touched,\n          errors,\n          values,\n          status,\n          setStatus,\n          handleChange,\n          handleSubmit,\n          setFieldValue,\n        }) => (\n          <Form>\n            <div className=\"login-form address-form\">\n              <div className=\"logininput username\">\n                <input\n                  type=\"text\"\n                  name=\"full_name\"\n                  value={values.full_name}\n                  onChange={handleChange}\n                  placeholder={t(\"account.addressBook.enterYourName\")}\n                  className={\n                    errors.full_name && touched.full_name\n                      ? \"input-error-border\"\n                      : \"\"\n                  }\n                />\n                {errors.full_name && touched.full_name && (\n                  <span className=\"input-error-msg\">{errors.full_name}</span>\n                )}\n              </div>\n              <div className=\"logininput loginphone\">\n                <PhoneInput\n                  country={\"us\"}\n                  enableLongNumbers={true}\n                  placeholder={t(\"account.addressBook.enterPhone\")}\n                  value={values.country_code + values.phone}\n                  onChange={(value, country: any) => {\n                    // const validNumberCount = (country.format.match(/\\./g) || [])\n                    //   .length;\n                    const phone = value.slice(country.dialCode.length);\n                    setFieldValue(\"country_code\", country.dialCode);\n                    setFieldValue(\"phone\", phone);\n                    // if (validNumberCount !== value.length) {\n                    //   errors.phone = \"Invalid Phone\";\n                    //   setStatus(errors);\n                    // // } else {\n                    //   errors.phone = \"\";\n                    //   delete errors.phone;\n                    // setStatus(errors);\n                    // }\n                  }}\n                  buttonClass={\n                    errors.phone && touched.phone ? \"input-error-border\" : \"\"\n                  }\n                  inputClass={\n                    errors.phone && touched.phone ? \"input-error-border\" : \"\"\n                  }\n                  onKeyDown={(e) => isNumberKey(e)}\n                />\n                {((errors.phone && touched.phone) || status?.phone) && (\n                  <span className=\"input-error-msg\">\n                    {errors.phone || status?.phone}\n                  </span>\n                )}\n              </div>\n              <div className=\"logininput loginarea\">\n                <input\n                  type=\"text\"\n                  name=\"address\"\n                  value={values.address}\n                  onChange={handleChange}\n                  placeholder={t(\"account.addressBook.enterAddress\")}\n                  className={\n                    errors.address && touched.address\n                      ? \"input-error-border\"\n                      : \"\"\n                  }\n                />\n                {errors.address && touched.address && (\n                  <span className=\"input-error-msg\">{errors.address}</span>\n                )}\n              </div>\n\n              <div className=\"logininput logincity\">\n                <input\n                  type=\"text\"\n                  name=\"address_city\"\n                  value={values.address_city}\n                  onChange={handleChange}\n                  placeholder={t(\"account.addressBook.enterCity\")}\n                  className={\n                    errors.address_city && touched.address_city\n                      ? \"input-error-border\"\n                      : \"\"\n                  }\n                />\n                {errors.address_city && touched.address_city && (\n                  <span className=\"input-error-msg\">{errors.address_city}</span>\n                )}\n              </div>\n              <div className=\"logininput loginzip\">\n                <input\n                  type=\"text\"\n                  name=\"address_zip_code\"\n                  value={values.address_zip_code}\n                  onChange={handleChange}\n                  minLength={5}\n                  onKeyDown={(e) => isNumberKey(e)}\n                  placeholder={t(\"account.addressBook.enterZipCode\")}\n                  className={\n                    errors.address_zip_code && touched.address_zip_code\n                      ? \"input-error-border\"\n                      : \"\"\n                  }\n                />\n                {errors.address_zip_code && touched.address_zip_code && (\n                  <span className=\"input-error-msg\">\n                    {errors.address_zip_code}\n                  </span>\n                )}\n              </div>\n              <div className=\"logininput loginprovince\">\n                <input\n                  type=\"text\"\n                  name=\"address_province\"\n                  value={values.address_province}\n                  onChange={handleChange}\n                  placeholder={t(\"account.addressBook.enterStateProvince\")}\n                  className={\n                    errors.address_province && touched.address_province\n                      ? \"input-error-border\"\n                      : \"\"\n                  }\n                />\n                {errors.address_province && touched.address_province && (\n                  <span className=\"input-error-msg\">\n                    {errors.address_province}\n                  </span>\n                )}\n              </div>\n            </div>\n            {/* <div className=\"homeadress-toggle\">\n                                <div className=\"homeadressiner\">\n                                    <h4>Make default shipping address</h4>\n                                    <label className=\"switch\">\n                                        <input \n                                            name='default_shipping'\n                                            value={values.default_shipping}\n                                            onChange={e => {\n                                                let val: number;\n                                                if(e.target.checked === true){\n                                                    val = 1;\n                                                } else {\n                                                    val = 0;\n                                                }\n                                                setFieldValue('default_shipping', val)\n                                            }}\n                                            type=\"checkbox\"\n                                        />\n                                        <span className=\"slider round\"></span>\n                                    </label>\n                                </div>\n                                <div className=\"homeadressiner\">\n                                    <h4>Make default billing address</h4>\n                                    <label className=\"switch\">\n                                        <input\n                                            name='default_billing'\n                                            value={values.default_billing}\n                                            onChange={e => {\n                                                let val: number;\n                                                if(e.target.checked === true){\n                                                    val = 1;\n                                                } else {\n                                                    val = 0;\n                                                }\n                                                setFieldValue('default_billing', val)\n                                            }}\n                                            type=\"checkbox\" \n                                        />\n                                        <span className=\"slider round\"></span>\n                                    </label>\n                                </div>\n                            </div> */}\n            {addressStatus === \"failed\" ? (\n              <div className=\"api-resposne-error-msg\">{addressErrorMsg}</div>\n            ) : null}\n            <div className=\"loginbtn\">\n              <Link\n                href=\"/account\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  handleSubmit();\n                }}\n              >\n                {addressStatus === \"loading\" ? (\n                  <ButtonLoader show={addressStatus === \"loading\"} />\n                ) : (\n                  `${t(\"account.addressBook.save\")}`\n                )}\n              </Link>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default AddAddressForm;\n","import React from \"react\";\nimport { HeadingH2, Section } from \"globalComponents/elements\";\nimport AddAddressForm from \"./AddAddressForm\"\n\nconst Address: React.FC = () => {\n  return (\n    <div className=\"tab-pane active accounttab\">\n      <Section className=\"loginsec createaccount-sec\">\n        <div className=\"custom-container\">\n          <HeadingH2 heading=\"account.addressBook.addHomeAddress\" />\n          <div className=\"loginoter address-form\">\n            <AddAddressForm />\n          </div>\n        </div>\n      </Section>\n    </div>\n  );\n};\n\nexport default Address;\n","import { BeatLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\n\nconst override = css`\n  margin-left: 5px;\n  margin-top: 9px;\n`;\n\ninterface ButtonLoaderProps {\n  show: boolean;\n  color?: string;\n  size?: number;\n}\n\nexport const ButtonLoader = ({ show, color, size }: ButtonLoaderProps) => {\n  return (\n    <BeatLoader\n      size={size ? size : 10}\n      color={color ? color : \"#fff\"}\n      loading={show}\n      css={override}\n    />\n  );\n};\n\nexport const FullPageLoader = () => {\n  return (\n    <div className=\"full-page-loader\">\n      <BeatLoader size=\"20px\" color=\"#6b4eaf\" />\n    </div>\n  );\n};\n","import { object, SchemaOf, string, ref, number } from 'yup';\nimport moment from 'moment';\n\ninterface loginSchemaInterface {\n  email: string;\n  password: string;\n}\n\ninterface forgotPasswordInterface {\n  email: string;\n}\n\ninterface registerSchemaInterface {\n  email: string;\n  password: string;\n  username: string;\n  confirm_password: string;\n}\ninterface resetPasswordInterface {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\ninterface editProfileInterface {\n  username: string | undefined;\n  date_of_birth: string | undefined;\n  gender: string | undefined;\n}\n\nexport interface addAddressInterface {\n  full_name: string | undefined;\n  phone: string | undefined;\n  address_province: string | undefined,\n  address_city: string | undefined,\n  address_zip_code: string | undefined,\n  address: string | undefined,\n  // default_shipping: number | undefined,\n  // default_billing: number | undefined\n}\n\nexport interface targetPriceInterface {\n  min: string | undefined,\n  max: string | undefined\n}\nexport interface incorrectPriceInterface {\n  price: string | undefined\n}\n\nexport const loginValidationSchema: SchemaOf<loginSchemaInterface> = object({\n  email: string().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().required(\"Password is required\"),\n});\n\nexport const registerValidationSchema: SchemaOf<registerSchemaInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  username: string().trim().max(15, \"Username should not be longer than 15 characters\").required(\"Name is required\"),\n  password: string().trim().min(8, \"Password must be at least 8 characters\").max(20, \"Password should not be longer than 20 characters\").required(\"Password is required\"),\n  confirm_password: string().trim().required(\"Confirm Password is required\").oneOf([ref('password'), null], 'Passwords must match')\n});\n\nexport const forgotPasswordValidationSchema: SchemaOf<forgotPasswordInterface> = object({\n  email: string().trim().required(\"Email is required.\").email(\"Enter valid email.\"),\n});\n\nexport const resetPasswordSchema: SchemaOf<resetPasswordInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().trim().required(\"Password is required\"),\n  password_confirmation: string().trim().oneOf([ref('password'), null], 'Passwords must match').required(\"Re enter your password\")\n});\n\nexport const editProfileSchema: SchemaOf<editProfileInterface> = object({\n  username: string().trim().min(3, 'Username must be at least 3 characters').required('Username is required'),\n  date_of_birth: string()\n    .test(\n      \"date_of_birth\",\n      \"Invalid date of birth\",\n      value => {\n        return moment().diff(moment(value), 'days') >= 1;\n      }\n    ),\n  gender: string().trim().required('Select gender').oneOf(['male', 'female'], 'Select gender'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n});\n\nexport const addAddressSchema: SchemaOf<addAddressInterface> = object({\n  full_name: string().trim().min(3, 'Full Name must be at least 3 characters').max(15, 'Full Name should not be larger than 15 characters long').required('Full Name is required'),\n  // phone: string().trim().min(6, \"Phone should be atleast 6 characters long\").max(25, \"Phone should not be larger than 25 characters long\").required('Phone is required'),\n  address_province: string().trim().min(3, 'Province must be at least 3 characters').max(50, 'Address province should not be larger than 50 characters long').required('Province is required'),\n  address_city: string().trim().min(3, 'City must be at least 3 characters').max(50, 'Address city should not be larger than 50 characters long').required('City is required'),\n  address_zip_code: string().trim().min(5, 'Zip Code must be at least 5 characters').max(10, 'Address zip code should not be larger than 10 characters long').required('Zip Code is required'),\n  address: string().trim().min(4, 'Address must be at least 4 characters').max(50, 'Address should not be larger than 50 characters long').required('Address is required'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n  // default_shipping: number().oneOf([0, 1]),\n  // default_billing: number().oneOf([0, 1]),\n});\n\nexport const targetPriceSchema: SchemaOf<targetPriceInterface> = object({\n  min: string().trim(),\n  max: string().trim().required('Maximum price is required'),\n}) \nexport const incorrectPriceSchema: SchemaOf<incorrectPriceInterface> = object({\n  price: string().trim().required(\"Report price is required\"),\n}) \n"],"names":["useAppSelector","userSelector","addressErrorMsg","addressStatus","dispatch","useAppDispatch","t","useTranslation","className","initialValues","address","address_city","address_province","address_zip_code","full_name","phone","country_code","validateOnChange","validationSchema","addAddressSchema","onSubmit","values","resetForm","addAddressThunk","body","payload","status_code","touched","errors","status","handleChange","setStatus","handleSubmit","setFieldValue","type","name","value","onChange","placeholder","country","enableLongNumbers","slice","dialCode","length","buttonClass","inputClass","onKeyDown","e","isNumberKey","minLength","href","onClick","preventDefault","show","heading","override","css","ButtonLoader","color","size","BeatLoader","loading","FullPageLoader","loginValidationSchema","object","email","string","required","password","registerValidationSchema","trim","username","max","min","confirm_password","oneOf","ref","forgotPasswordValidationSchema","resetPasswordSchema","password_confirmation","editProfileSchema","date_of_birth","test","moment","diff","gender","targetPriceSchema","incorrectPriceSchema","price"],"sourceRoot":""}