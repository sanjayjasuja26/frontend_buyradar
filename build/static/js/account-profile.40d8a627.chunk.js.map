{"version":3,"file":"static/js/account-profile.40d8a627.chunk.js","mappings":"oKAeA,IAZ2B,WACzB,OACE,iBAAKA,UAAU,UAAf,WACE,SAAC,KAAD,KACA,0BACE,SAAC,IAAD,CAAgBC,KAAK,8BADvB,KACsD,mBACpD,SAAC,IAAD,CAAgBA,KAAK,iC,wPCgV7B,EApUwD,SAAC,GAGlD,IAFLC,EAEI,EAFJA,OACAC,EACI,EADJA,UAEQC,GAAMC,EAAAA,EAAAA,KAAND,EACR,GACEE,EAAAA,EAAAA,GAAeC,EAAAA,GADTC,EAAR,EAAQA,kBAAmBC,EAA3B,EAA2BA,oBAAqBC,EAAhD,EAAgDA,KAG1CC,GAAWC,EAAAA,EAAAA,KACjB,GAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACE,+BACE,SAAC,KAAD,CACEC,cAAe,CACbC,SAAUP,EAAKO,SAAWP,EAAKO,SAAW,GAC1CC,MAAOR,EAAKQ,MAAQR,EAAKQ,MAAQ,GACjCC,MAAOT,EAAKS,MAAQT,EAAKS,MAAQ,GACjCC,aAAcV,EAAKU,aAAeV,EAAKU,aAAe,GACtDC,cAAeX,EAAKW,cAAgBX,EAAKW,cAAgB,GACzDC,OAAQZ,EAAKY,OAASZ,EAAKY,OAAS,IAEtCC,iBAAkBC,EAAAA,GAClBC,SAAQ,yCAAE,WAAOC,EAAQC,GAAf,yEACa,KAAjBD,EAAOP,MADH,uBAENJ,EAAY,wBAFN,8BAKJb,EALI,gCAMUS,GACdiB,EAAAA,EAAAA,IAAiB,CACfC,MAAK,kBAAMH,GAAP,IAAeI,KAAM,OARvB,OAY0B,MAZ1B,OAYEC,QAAQC,cACdrB,GAASsB,EAAAA,EAAAA,OACT9B,GAAU,IAdN,2CAAF,wDAVV,SA6BG,YASM,IARL+B,EAQI,EARJA,QACAC,EAOI,EAPJA,OACAT,EAMI,EANJA,OACAU,EAKI,EALJA,OAEAC,GAGI,EAJJC,UAII,EAHJD,cACAE,EAEI,EAFJA,aACAC,EACI,EADJA,cAOA,OACE,UAAC,KAAD,YACE,iBAAKxC,UAAU,sBAAf,WACE,iBAAKA,UAAU,mBAAf,UACuB,KAApB0B,EAAOT,UAAoBf,GAG1B,2BAAQE,EAAE,8BAFV,GAIDF,GACC,kBACE4B,KAAK,OACLW,KAAK,WACLC,MACEhB,EAAOT,SAAS0B,QAAU,EACtBjB,EAAOT,SACPP,EAAKO,SAEX2B,SAAUP,EACVrC,UACEmC,EAAOlB,UAAYiB,EAAQjB,SACvB,qBACA,GAEN4B,UAAU,KAGZ,eAAI7C,UAAU,aAAd,gBAA4BU,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMO,WAEnCkB,EAAOlB,UAAYiB,EAAQjB,UAAYf,IACtC,iBAAMF,UAAU,kBAAhB,SAAmCmC,EAAOlB,eAG9C,iBAAKjB,UAAU,mBAAf,UACoB,KAAjB0B,EAAOR,OAAiBhB,GAGvB,2BAAQE,EAAE,kCAFV,GAIDF,GACC,kBACE4B,KAAK,QACLW,KAAK,QACLC,MAAOhB,EAAOR,MAAQQ,EAAOR,MAAtB,OAA8BR,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAMQ,MAC3C0B,SAAUP,EACVrC,UACEmC,EAAOjB,OAASgB,EAAQhB,MACpB,qBACA,GAEN2B,UAAU,KAGZ,+BAAKnC,QAAL,IAAKA,OAAL,EAAKA,EAAMQ,QAEZiB,EAAOjB,OAASgB,EAAQhB,OAAShB,IAChC,iBAAMF,UAAU,kBAAhB,SAAmCmC,EAAOjB,YAG9C,iBAAKlB,UAAU,mBAAf,UACoB,KAAjB0B,EAAOP,OACgB,KAAxBO,EAAON,cACNlB,GAGC,2BAAQE,EAAE,4BAFV,GAIDF,GACC,SAAC,IAAD,CACE4C,QAAS,KACTC,mBAAmB,EACnBL,MAGEhB,EAAON,aAAeM,EAAOP,MAG/ByB,SAAU,SAACF,EAAOI,GAOhB,IAAM3B,EAAQuB,EAAMM,MAAMF,EAAQG,SAASN,QAK3CH,EAAc,eAAgBM,EAAQG,UACtCT,EAAc,QAASrB,IAmBzB+B,YACGf,EAAOhB,OAASe,EAAQf,OAAzB,OACAiB,QADA,IACAA,GAAAA,EAAQjB,OACRL,EACI,qBACA,GAENqC,WACGhB,EAAOhB,OAASe,EAAQf,OAAzB,OACAiB,QADA,IACAA,GAAAA,EAAQjB,OACRL,EACI,qBACA,GAENsC,UAAW,SAACC,GAAD,OAAOC,EAAAA,EAAAA,IAAYD,OAGhC,0BACO,OAAJ3C,QAAI,IAAJA,GAAAA,EAAMU,aAAN,WAAyBV,EAAKU,cAAiB,KAAM,IADxD,OAEGV,QAFH,IAEGA,OAFH,EAEGA,EAAMS,UAGRgB,EAAOhB,OAASe,EAAQf,QAAzB,OACAiB,QADA,IACAA,OADA,EACAA,EAAQjB,QACRL,KACA,iBAAMd,UAAU,kBAAhB,SACGmC,EAAOhB,QAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAQjB,QAASL,QAIxC,iBAAKd,UAAU,mBAAf,UAC4B,KAAzB0B,EAAOL,eAAyBnB,GAG/B,2BAAQE,EAAE,8BAFV,GAIDF,GACC,kBACE4B,KAAK,OACLW,KAAK,gBACLC,MACEhB,EAAOL,cACHK,EAAOL,cADX,OAEIX,QAFJ,IAEIA,OAFJ,EAEIA,EAAMW,cAEZuB,SAAUP,EACVrC,UACEmC,EAAOd,eAAiBa,EAAQb,cAC5B,qBACA,GAGNkC,KAAKC,EAAAA,EAAAA,SAGP,wBAC4B,KAAzB9B,EAAOL,eACN,IAAIoC,KAAJ,OAAS/C,QAAT,IAASA,OAAT,EAASA,EAAMW,eAAeqC,uBAGnCvB,EAAOd,eAAiBa,EAAQb,eAAiBnB,IAChD,iBAAMF,UAAU,kBAAhB,SACGmC,EAAOd,oBAId,iBAAKrB,UAAU,mBAAf,UACqB,KAAlB0B,EAAOJ,QAAkBpB,GAGxB,2BAAQE,EAAE,4BAFV,GAIDF,GACC,oBACEuC,KAAK,SACLC,MAAOhB,EAAOJ,OAASI,EAAOJ,OAAvB,OAAgCZ,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAMY,OAC7CsB,SAAU,SAACS,GACLA,EAAEM,OAAOjB,OACXF,EAAc,SAAUa,EAAEM,OAAOjB,QAGrC1C,UACEmC,EAAOb,QAAUY,EAAQZ,OACrB,qBACA,GAXR,WAcE,mBAAQoB,MAAM,GAAGkB,aAAa,gBAA9B,4BAGA,mBAAQlB,MAAM,OAAd,mBACA,mBAAQA,MAAM,SAAd,wBAGF,eAAI1C,UAAU,aAAd,gBAA4BU,QAA5B,IAA4BA,OAA5B,EAA4BA,EAAMY,SAEnCa,EAAOb,QAAUY,EAAQZ,QAAUpB,IAClC,iBAAMF,UAAU,kBAAhB,SAAmCmC,EAAOb,eAI/CpB,GAAgC,WAAtBM,GACT,gBAAKR,UAAU,yBAAf,SACGS,IAED,MACJ,iBAAKT,UAAU,oBAAf,WAEE,SAAC,KAAD,CACE6D,KAAK,WACL7D,UAAU,UACV8D,QAAS,SAACT,GACRA,EAAEU,iBACE7D,EACFqC,IAEApC,GAAU,IARhB,SAYGD,EACuB,YAAtBM,GACE,SAAC,IAAD,CAAcwD,KAA4B,YAAtBxD,IAEpB,eAGF,iBAGHN,IACC,SAAC,KAAD,CACE2D,KAAK,WACL7D,UAAS,UACe,YAAtBQ,EACI,0BACA,eAENsD,QAAS,SAACT,GACRA,EAAEU,iBACwB,YAAtBvD,GACFL,GAAU,IAVhB,mBAeMC,EAAE,yC,UC3Ub6D,EAAqB,kBAC9B,+BACA,UAAC,KAAD,CACAC,OAAQ,IACRC,MAAO,EACPC,gBAAiB,UACjBC,gBAAiB,UACjBC,QAAQ,aALR,WAOA,iBAAMC,EAAE,IAAIC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIC,MAAM,MAAMT,OAAO,QACnD,iBAAMK,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIC,MAAM,MAAMT,OAAO,QACrD,iBAAMK,EAAE,MAAMC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIC,MAAM,MAAMT,OAAO,QACrD,iBAAMK,EAAE,IAAIC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIC,MAAM,MAAMT,OAAO,QACpD,iBAAMK,EAAE,MAAMC,EAAE,KAAKC,GAAG,IAAIC,GAAG,IAAIC,MAAM,MAAMT,OAAO,a,oBC0B1D,EAhC0B,WACxB,IAAMvD,GAAWC,EAAAA,EAAAA,KACTgE,GAAqBtE,EAAAA,EAAAA,GAAeC,EAAAA,GAApCqE,iBAER,GAA4B/D,EAAAA,EAAAA,WAAS,GAArC,eAAOX,EAAP,KAAeC,EAAf,KAMA,OAJA0E,EAAAA,EAAAA,YAAU,WACRlE,GAASsB,EAAAA,EAAAA,SACR,KAGD,iBAAKjC,UAAU,6BAAf,WACE,gBAAKA,UAAU,iBAAf,UACE,wBACGE,GACC,SAAC,IAAD,CAAgBD,KAAK,iCAErB,SAAC,IAAD,CAAgBA,KAAK,kCAIL,YAArB2E,GACC,SAACX,EAAD,IACuB,SAArBW,GACF,SAAC,EAAD,CAAiB1E,OAAQA,EAAQC,UAAWA,KAE5C,SAAC,IAAD,S,wHChCF2E,GAAWC,EAAAA,EAAAA,KAAH,iEAWDC,EAAe,SAAC,GAA8C,IAA5ChB,EAA2C,EAA3CA,KAAMiB,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAC1C,OACE,SAAC,EAAAC,WAAD,CACED,KAAMA,GAAc,GACpBD,MAAOA,GAAgB,OACvBG,QAASpB,EACTe,IAAKD,KAKEO,EAAiB,WAC5B,OACE,gBAAKrF,UAAU,mBAAf,UACE,SAAC,EAAAmF,WAAD,CAAYD,KAAK,OAAOD,MAAM,gB,8PCqBvBK,GAAwDC,EAAAA,EAAAA,IAAO,CAC1ErE,OAAOsE,EAAAA,EAAAA,MAASC,SAAS,qBAAqBvE,MAAM,qBACpDwE,UAAUF,EAAAA,EAAAA,MAASC,SAAS,0BAGjBE,GAA8DJ,EAAAA,EAAAA,IAAO,CAChFrE,OAAOsE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAAqBvE,MAAM,qBAC3DD,UAAUuE,EAAAA,EAAAA,MAASI,OAAOrC,IAAI,GAAI,oDAAoDkC,SAAS,oBAC/FC,UAAUF,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,0CAA0CtC,IAAI,GAAI,oDAAoDkC,SAAS,wBAChJK,kBAAkBN,EAAAA,EAAAA,MAASI,OAAOH,SAAS,gCAAgCM,MAAM,EAACC,EAAAA,EAAAA,IAAI,YAAa,MAAO,0BAG/FC,GAAoEV,EAAAA,EAAAA,IAAO,CACtFrE,OAAOsE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,sBAAsBvE,MAAM,wBAGjDgF,GAAwDX,EAAAA,EAAAA,IAAO,CAC1ErE,OAAOsE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAAqBvE,MAAM,qBAC3DwE,UAAUF,EAAAA,EAAAA,MAASI,OAAOH,SAAS,wBACnCU,uBAAuBX,EAAAA,EAAAA,MAASI,OAAOG,MAAM,EAACC,EAAAA,EAAAA,IAAI,YAAa,MAAO,wBAAwBP,SAAS,4BAG5FjE,GAAoD+D,EAAAA,EAAAA,IAAO,CACtEtE,UAAUuE,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,0CAA0CJ,SAAS,wBACpFpE,eAAemE,EAAAA,EAAAA,MACZY,KACC,gBACA,yBACA,SAAA1D,GACE,OAAO2D,MAASC,KAAKD,IAAO3D,GAAQ,SAAW,KAGrDpB,QAAQkE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,iBAAiBM,MAAM,CAAC,OAAQ,UAAW,iBAC5E5E,OAAOqE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAChCrE,cAAcoE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,8BAG5Bc,GAAkDhB,EAAAA,EAAAA,IAAO,CACpEiB,WAAWhB,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,2CAA2CtC,IAAI,GAAI,0DAA0DkC,SAAS,yBAExJgB,kBAAkBjB,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,0CAA0CtC,IAAI,GAAI,iEAAiEkC,SAAS,wBACrKiB,cAAclB,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,sCAAsCtC,IAAI,GAAI,6DAA6DkC,SAAS,oBACzJkB,kBAAkBnB,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,0CAA0CtC,IAAI,GAAI,iEAAiEkC,SAAS,wBACrKmB,SAASpB,EAAAA,EAAAA,MAASI,OAAOC,IAAI,EAAG,yCAAyCtC,IAAI,GAAI,wDAAwDkC,SAAS,uBAClJtE,OAAOqE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAChCrE,cAAcoE,EAAAA,EAAAA,MAASI,OAAOH,SAAS,8BAK5BoB,GAAoDtB,EAAAA,EAAAA,IAAO,CACtEM,KAAKL,EAAAA,EAAAA,MAASI,OACdrC,KAAKiC,EAAAA,EAAAA,MAASI,OAAOH,SAAS,+BAEnBqB,GAA0DvB,EAAAA,EAAAA,IAAO,CAC5EwB,OAAOvB,EAAAA,EAAAA,MAASI,OAAOH,SAAS","sources":["components/somethingWentWrong/index.tsx","features/userAccount/components/Sections/Profile/EditProfileForm.tsx","components/placeholders/profile.tsx","features/userAccount/components/Sections/Profile/index.tsx","globalComponents/loaders/index.tsx","utils/validations.ts"],"sourcesContent":["import TranslatedText from \"components/translatedText\";\nimport { WarningIconSVG } from \"assets/svgComponents/icons\";\n\nconst SomethingWentWrong = () => {\n  return (\n    <div className=\"warning\">\n      <WarningIconSVG />\n      <p>\n        <TranslatedText text=\"global.somethingWentWrong\" /> <br />\n        <TranslatedText text=\"global.failedToFetch\" />\n      </p>\n    </div>\n  );\n};\n\nexport default SomethingWentWrong;\n\nexport const NoProductFound = ({ className }: { className?: string }) => {\n  return (\n    <div className=\"no-product-found-wrapper\">\n      <div className=\"warning\" style={{ width: \"unset\" }}>\n        <WarningIconSVG />\n        <p>\n          <TranslatedText text=\"global.noProductsFound\" />\n        </p>\n      </div>\n    </div>\n  );\n};\n","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport { userSelector } from \"features/userAccount/userSelectors\";\nimport { Formik, Form } from \"formik\";\nimport { Link } from \"globalComponents/elements\";\nimport { ButtonLoader } from \"globalComponents/loaders\";\nimport { editProfileSchema } from \"utils/validations\";\nimport React, { useState } from \"react\";\nimport {\n  editProfileThunk,\n  getProfileThunk,\n} from \"features/userAccount/userThunks\";\nimport { isNumberKey, getMaxDate } from \"utils/helpers\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/style.css\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface EditProfileFormProps {\n  isEdit: boolean;\n  setIsEdit: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst EditProfileForm: React.FC<EditProfileFormProps> = ({\n  isEdit,\n  setIsEdit,\n}) => {\n  const { t } = useTranslation();\n  const { editProfileStatus, editProfileErrorMsg, user } =\n    useAppSelector(userSelector);\n\n  const dispatch = useAppDispatch();\n  const [phoneErr, setPhoneErr] = useState(\"\");\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          username: user.username ? user.username : \"\",\n          email: user.email ? user.email : \"\",\n          phone: user.phone ? user.phone : \"\",\n          country_code: user.country_code ? user.country_code : \"\",\n          date_of_birth: user.date_of_birth ? user.date_of_birth : \"\",\n          gender: user.gender ? user.gender : \"\",\n        }}\n        validationSchema={editProfileSchema}\n        onSubmit={async (values, actions) => {\n          if (values.phone === \"\") {\n            setPhoneErr(\"Please provide phone\");\n            return;\n          }\n          if (isEdit) {\n            let res = await dispatch(\n              editProfileThunk({\n                body: { ...values, type: 1 },\n              })\n            );\n\n            if (res.payload.status_code === 200) {\n              dispatch(getProfileThunk());\n              setIsEdit(false);\n            }\n          }\n        }}\n      >\n        {({\n          touched,\n          errors,\n          values,\n          status,\n          setStatus,\n          handleChange,\n          handleSubmit,\n          setFieldValue,\n        }) => {\n          // console.log(\n          //   \"value---- in form render phone.length===\",\n          //   values\n          // );\n          // console.log(\"errorrrr\", errors)\n          return (\n            <Form>\n              <div className=\"account-inputfeilds\">\n                <div className=\"accuntinput-oter\">\n                  {values.username === \"\" && !isEdit ? (\n                    \"\"\n                  ) : (\n                    <label>{t(\"account.profile.userName\")}</label>\n                  )}\n                  {isEdit ? (\n                    <input\n                      type=\"text\"\n                      name=\"username\"\n                      value={\n                        values.username.length >= 0\n                          ? values.username\n                          : user.username\n                      }\n                      onChange={handleChange}\n                      className={\n                        errors.username && touched.username\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                      disabled={true}\n                    />\n                  ) : (\n                    <h3 className=\"capitalize\">{user?.username}</h3>\n                  )}\n                  {errors.username && touched.username && isEdit && (\n                    <span className=\"input-error-msg\">{errors.username}</span>\n                  )}\n                </div>\n                <div className=\"accuntinput-oter\">\n                  {values.email === \"\" && !isEdit ? (\n                    \"\"\n                  ) : (\n                    <label>{t(\"account.profile.emailAddress\")}</label>\n                  )}\n                  {isEdit ? (\n                    <input\n                      type=\"email\"\n                      name=\"email\"\n                      value={values.email ? values.email : user?.email}\n                      onChange={handleChange}\n                      className={\n                        errors.email && touched.email\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                      disabled={true}\n                    />\n                  ) : (\n                    <h3>{user?.email}</h3>\n                  )}\n                  {errors.email && touched.email && isEdit && (\n                    <span className=\"input-error-msg\">{errors.email}</span>\n                  )}\n                </div>\n                <div className=\"accuntinput-oter\">\n                  {values.phone === \"\" &&\n                  values.country_code === \"\" &&\n                  !isEdit ? (\n                    \"\"\n                  ) : (\n                    <label>{t(\"account.profile.mobile\")}</label>\n                  )}\n                  {isEdit ? (\n                    <PhoneInput\n                      country={\"us\"}\n                      enableLongNumbers={true}\n                      value={\n                        // (values.country_code && values.phone)\n                        // ?\n                        values.country_code + values.phone\n                        // : user?.country_code + user?.phone\n                      }\n                      onChange={(value, country: any) => {\n                        // const validNumberCount = (\n                        //   country.format.match(/\\./g) || []\n                        // ).length;\n                        // console.log(\"value===\", value);\n                        // // console.log(\"\")\n                        // console.log(\"country.dialCode\", country.dialCode);\n                        const phone = value.slice(country.dialCode.length);\n                        // console.log(\n                        //   \"phone length ===== after slice\",\n                        //   phone\n                        // );\n                        setFieldValue(\"country_code\", country.dialCode);\n                        setFieldValue(\"phone\", phone);\n                        // console.log(\"value @onChange---\", value);\n                        // if (value.length < 6) {\n                        //   errors.phone =\n                        //     \"Mobile should be atleast 6 characters long\";\n                        // } else if (value.length > 25) {\n                        //   errors.phone =\n                        //     \"Mobile should not be larger than 25 characters long\";\n                        // }\n                        // else if (validNumberCount !== value.length) {\n                        //   errors.phone = \"Invalid Mobile\";\n                        // }\n                        // else {\n                        //   setPhoneErr(\"\");\n                        //   errors.phone = \"\";\n                        //   delete errors.phone;\n                        // }\n                        // setStatus(errors);\n                      }}\n                      buttonClass={\n                        (errors.phone && touched.phone) ||\n                        status?.phone ||\n                        phoneErr\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                      inputClass={\n                        (errors.phone && touched.phone) ||\n                        status?.phone ||\n                        phoneErr\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                      onKeyDown={(e) => isNumberKey(e)}\n                    />\n                  ) : (\n                    <h3>\n                      {user?.country_code ? `+${user.country_code}` : null}{\" \"}\n                      {user?.phone}\n                    </h3>\n                  )}\n                  {((errors.phone && touched.phone) ||\n                    status?.phone ||\n                    phoneErr) && (\n                    <span className=\"input-error-msg\">\n                      {errors.phone || status?.phone || phoneErr}\n                    </span>\n                  )}\n                </div>\n                <div className=\"accuntinput-oter\">\n                  {values.date_of_birth === \"\" && !isEdit ? (\n                    \"\"\n                  ) : (\n                    <label>{t(\"account.profile.birthday\")}</label>\n                  )}\n                  {isEdit ? (\n                    <input\n                      type=\"date\"\n                      name=\"date_of_birth\"\n                      value={\n                        values.date_of_birth\n                          ? values.date_of_birth\n                          : user?.date_of_birth\n                      }\n                      onChange={handleChange}\n                      className={\n                        errors.date_of_birth && touched.date_of_birth\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                      // min=\"2014-05-11\"\n                      max={getMaxDate()}\n                    />\n                  ) : (\n                    <h3>\n                      {values.date_of_birth !== \"\" &&\n                        new Date(user?.date_of_birth).toLocaleDateString()}\n                    </h3>\n                  )}\n                  {errors.date_of_birth && touched.date_of_birth && isEdit && (\n                    <span className=\"input-error-msg\">\n                      {errors.date_of_birth}\n                    </span>\n                  )}\n                </div>\n                <div className=\"accuntinput-oter\">\n                  {values.gender === \"\" && !isEdit ? (\n                    \"\"\n                  ) : (\n                    <label>{t(\"account.profile.gender\")}</label>\n                  )}\n                  {isEdit ? (\n                    <select\n                      name=\"gender\"\n                      value={values.gender ? values.gender : user?.gender}\n                      onChange={(e) => {\n                        if (e.target.value) {\n                          setFieldValue(\"gender\", e.target.value);\n                        }\n                      }}\n                      className={\n                        errors.gender && touched.gender\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                    >\n                      <option value=\"\" defaultValue=\"select-gender\">\n                        Select Gender\n                      </option>\n                      <option value=\"male\">Male</option>\n                      <option value=\"female\">Female</option>\n                    </select>\n                  ) : (\n                    <h3 className=\"capitalize\">{user?.gender}</h3>\n                  )}\n                  {errors.gender && touched.gender && isEdit && (\n                    <span className=\"input-error-msg\">{errors.gender}</span>\n                  )}\n                </div>\n              </div>\n              {isEdit && editProfileStatus === \"failed\" ? (\n                <div className=\"api-resposne-error-msg\">\n                  {editProfileErrorMsg}\n                </div>\n              ) : null}\n              <div className=\"availableshop-btn\">\n                {/* <Link href=\"/account\" className=\"addcart-btn\" onClick={e => e.preventDefault()}>Change Password</Link> */}\n                <Link\n                  href=\"/account\"\n                  className=\"buy-btn\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    if (isEdit) {\n                      handleSubmit();\n                    } else {\n                      setIsEdit(true);\n                    }\n                  }}\n                >\n                  {isEdit ? (\n                    editProfileStatus === \"loading\" ? (\n                      <ButtonLoader show={editProfileStatus === \"loading\"} />\n                    ) : (\n                      \"Save Profile\"\n                    )\n                  ) : (\n                    \"Edit Profile\"\n                  )}\n                </Link>\n                {isEdit && (\n                  <Link\n                    href=\"/account\"\n                    className={`${\n                      editProfileStatus === \"loading\"\n                        ? \"addcart-btn disable-btn\"\n                        : \"addcart-btn\"\n                    }`}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      if (editProfileStatus !== \"loading\") {\n                        setIsEdit(false);\n                        // dispatch(getProfileThunk());\n                      }\n                    }}\n                  >\n                    {`${t(\"account.profile.cancel\")}`}\n                  </Link>\n                )}\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nexport default EditProfileForm;\n","import ContentLoader from \"react-content-loader\";\n\nexport const ProfilePlaceholder = () => (\n    <>\n    <ContentLoader\n    height={160}\n    speed={1}\n    backgroundColor={'#ececec'}\n    foregroundColor={'#fafafa'}\n    viewBox=\"0 0 400 80\"\n  >\n    <rect x=\"0\" y=\"0\" rx=\"4\" ry=\"4\" width=\"100\" height=\"20\" />\n    <rect x=\"120\" y=\"0\" rx=\"4\" ry=\"4\" width=\"100\" height=\"20\" />\n    <rect x=\"240\" y=\"0\" rx=\"4\" ry=\"4\" width=\"100\" height=\"20\" />\n    <rect x=\"0\" y=\"50\" rx=\"4\" ry=\"4\" width=\"100\" height=\"20\" />\n    <rect x=\"120\" y=\"50\" rx=\"4\" ry=\"4\" width=\"100\" height=\"20\" />\n  </ContentLoader>\n</>\n);","import { useAppDispatch, useAppSelector } from \"app/hooks\";\nimport React, { useEffect, useState } from \"react\";\nimport { userSelector } from \"../../../userSelectors\";\nimport { getProfileThunk } from \"../../../userThunks\";\nimport EditProfileForm from \"./EditProfileForm\";\nimport { ProfilePlaceholder } from \"components/placeholders/profile\";\nimport SomethingWentWrong from \"components/somethingWentWrong\";\nimport TranslatedText from \"components/translatedText\";\n\nconst Profile: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { getProfileStatus } = useAppSelector(userSelector);\n\n  const [isEdit, setIsEdit] = useState(false);\n\n  useEffect(() => {\n    dispatch(getProfileThunk());\n  }, []);\n\n  return (\n    <div className=\"tab-pane active accounttab\">\n      <div className=\"acounttab-hdng\">\n        <h2>\n          {isEdit ? (\n            <TranslatedText text=\"account.profile.editProfile\" />\n          ) : (\n            <TranslatedText text=\"account.profile.myProfile\" />\n          )}\n        </h2>\n      </div>\n      {getProfileStatus === \"loading\" ? (\n        <ProfilePlaceholder />\n      ) : getProfileStatus === \"idle\" ? (\n        <EditProfileForm isEdit={isEdit} setIsEdit={setIsEdit} />\n      ) : (\n        <SomethingWentWrong />\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n","import { BeatLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\n\nconst override = css`\n  margin-left: 5px;\n  margin-top: 9px;\n`;\n\ninterface ButtonLoaderProps {\n  show: boolean;\n  color?: string;\n  size?: number;\n}\n\nexport const ButtonLoader = ({ show, color, size }: ButtonLoaderProps) => {\n  return (\n    <BeatLoader\n      size={size ? size : 10}\n      color={color ? color : \"#fff\"}\n      loading={show}\n      css={override}\n    />\n  );\n};\n\nexport const FullPageLoader = () => {\n  return (\n    <div className=\"full-page-loader\">\n      <BeatLoader size=\"20px\" color=\"#6b4eaf\" />\n    </div>\n  );\n};\n","import { object, SchemaOf, string, ref, number } from 'yup';\nimport moment from 'moment';\n\ninterface loginSchemaInterface {\n  email: string;\n  password: string;\n}\n\ninterface forgotPasswordInterface {\n  email: string;\n}\n\ninterface registerSchemaInterface {\n  email: string;\n  password: string;\n  username: string;\n  confirm_password: string;\n}\ninterface resetPasswordInterface {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\ninterface editProfileInterface {\n  username: string | undefined;\n  date_of_birth: string | undefined;\n  gender: string | undefined;\n}\n\nexport interface addAddressInterface {\n  full_name: string | undefined;\n  phone: string | undefined;\n  address_province: string | undefined,\n  address_city: string | undefined,\n  address_zip_code: string | undefined,\n  address: string | undefined,\n  // default_shipping: number | undefined,\n  // default_billing: number | undefined\n}\n\nexport interface targetPriceInterface {\n  min: string | undefined,\n  max: string | undefined\n}\nexport interface incorrectPriceInterface {\n  price: string | undefined\n}\n\nexport const loginValidationSchema: SchemaOf<loginSchemaInterface> = object({\n  email: string().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().required(\"Password is required\"),\n});\n\nexport const registerValidationSchema: SchemaOf<registerSchemaInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  username: string().trim().max(15, \"Username should not be longer than 15 characters\").required(\"Name is required\"),\n  password: string().trim().min(8, \"Password must be at least 8 characters\").max(20, \"Password should not be longer than 20 characters\").required(\"Password is required\"),\n  confirm_password: string().trim().required(\"Confirm Password is required\").oneOf([ref('password'), null], 'Passwords must match')\n});\n\nexport const forgotPasswordValidationSchema: SchemaOf<forgotPasswordInterface> = object({\n  email: string().trim().required(\"Email is required.\").email(\"Enter valid email.\"),\n});\n\nexport const resetPasswordSchema: SchemaOf<resetPasswordInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().trim().required(\"Password is required\"),\n  password_confirmation: string().trim().oneOf([ref('password'), null], 'Passwords must match').required(\"Re enter your password\")\n});\n\nexport const editProfileSchema: SchemaOf<editProfileInterface> = object({\n  username: string().trim().min(3, 'Username must be at least 3 characters').required('Username is required'),\n  date_of_birth: string()\n    .test(\n      \"date_of_birth\",\n      \"Invalid date of birth\",\n      value => {\n        return moment().diff(moment(value), 'days') >= 1;\n      }\n    ),\n  gender: string().trim().required('Select gender').oneOf(['male', 'female'], 'Select gender'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n});\n\nexport const addAddressSchema: SchemaOf<addAddressInterface> = object({\n  full_name: string().trim().min(3, 'Full Name must be at least 3 characters').max(15, 'Full Name should not be larger than 15 characters long').required('Full Name is required'),\n  // phone: string().trim().min(6, \"Phone should be atleast 6 characters long\").max(25, \"Phone should not be larger than 25 characters long\").required('Phone is required'),\n  address_province: string().trim().min(3, 'Province must be at least 3 characters').max(50, 'Address province should not be larger than 50 characters long').required('Province is required'),\n  address_city: string().trim().min(3, 'City must be at least 3 characters').max(50, 'Address city should not be larger than 50 characters long').required('City is required'),\n  address_zip_code: string().trim().min(5, 'Zip Code must be at least 5 characters').max(10, 'Address zip code should not be larger than 10 characters long').required('Zip Code is required'),\n  address: string().trim().min(4, 'Address must be at least 4 characters').max(50, 'Address should not be larger than 50 characters long').required('Address is required'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n  // default_shipping: number().oneOf([0, 1]),\n  // default_billing: number().oneOf([0, 1]),\n});\n\nexport const targetPriceSchema: SchemaOf<targetPriceInterface> = object({\n  min: string().trim(),\n  max: string().trim().required('Maximum price is required'),\n}) \nexport const incorrectPriceSchema: SchemaOf<incorrectPriceInterface> = object({\n  price: string().trim().required(\"Report price is required\"),\n}) \n"],"names":["className","text","isEdit","setIsEdit","t","useTranslation","useAppSelector","userSelector","editProfileStatus","editProfileErrorMsg","user","dispatch","useAppDispatch","useState","phoneErr","setPhoneErr","initialValues","username","email","phone","country_code","date_of_birth","gender","validationSchema","editProfileSchema","onSubmit","values","actions","editProfileThunk","body","type","payload","status_code","getProfileThunk","touched","errors","status","handleChange","setStatus","handleSubmit","setFieldValue","name","value","length","onChange","disabled","country","enableLongNumbers","slice","dialCode","buttonClass","inputClass","onKeyDown","e","isNumberKey","max","getMaxDate","Date","toLocaleDateString","target","defaultValue","href","onClick","preventDefault","show","ProfilePlaceholder","height","speed","backgroundColor","foregroundColor","viewBox","x","y","rx","ry","width","getProfileStatus","useEffect","override","css","ButtonLoader","color","size","BeatLoader","loading","FullPageLoader","loginValidationSchema","object","string","required","password","registerValidationSchema","trim","min","confirm_password","oneOf","ref","forgotPasswordValidationSchema","resetPasswordSchema","password_confirmation","test","moment","diff","addAddressSchema","full_name","address_province","address_city","address_zip_code","address","targetPriceSchema","incorrectPriceSchema","price"],"sourceRoot":""}