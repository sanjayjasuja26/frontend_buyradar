{"version":3,"file":"static/js/login.a58841ff.chunk.js","mappings":"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","sources":["features/auth/login/components/loginForm.tsx","features/auth/login/index.tsx","globalComponents/loaders/index.tsx","utils/validations.ts"],"sourcesContent":["import { Formik, Form } from \"formik\";\nimport { Link } from \"globalComponents/elements\";\nimport { loginValidationSchema } from \"utils/validations\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppSelector } from \"app/hooks\";\nimport { selectLoginState } from \"../../authSelectors\";\nimport { useEffect } from \"react\";\nimport withCountry from \"hoc/countryName\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface LoginFormProps {\n  loginHandler: (a: any) => void;\n  countryName: string;\n  countryCode: string;\n}\n\nconst InnerForm = ({\n  loginHandler,\n  countryName,\n  countryCode,\n}: LoginFormProps) => {\n  const history = useHistory();\n  const { isLoggedIn, isLoggingStatus, loggingErrorMsg } =\n    useAppSelector(selectLoginState);\n  useEffect(() => {\n    if (isLoggedIn) {\n      history.push(\"/home\");\n    }\n  }, [isLoggedIn, history]);\n  const { t } = useTranslation();\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        validationSchema={loginValidationSchema}\n        onSubmit={async (values) => {\n          loginHandler({\n            values: {\n              ...values,\n              country_code: countryCode,\n              country_name: countryName,\n            },\n          });\n        }}\n      >\n        {({\n          touched,\n          errors,\n          // isSubmitting,\n          // values,\n          handleChange,\n          handleSubmit,\n        }) => {\n          return (\n            <Form\n              onSubmit={handleSubmit}\n              onKeyDown={(e) => {\n                if (e.key === \"Enter\") {\n                  handleSubmit();\n                }\n              }}\n            >\n              {isLoggingStatus === \"failed\" ? (\n                <div className=\"api-resposne-error-msg\">{loggingErrorMsg}</div>\n              ) : null}\n              <div className=\"login-form\">\n                <div className=\"loginput-otr\">\n                  <div className=\"logininput loginemail\">\n                    <input\n                      // autoComplete=\"off\"\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder={t(\"auth.enterEmail\")}\n                      onChange={handleChange}\n                      className={\n                        errors.email && touched.email\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                    />\n                  </div>\n                  {errors.email && touched.email && (\n                    <span className=\"input-error-msg\">\n                      {t(`auth.validationMsgs.${[errors.email]}`)}\n                    </span>\n                  )}\n                </div>\n                <div className=\"loginput-otr\">\n                  <div className=\"logininput loginpass\">\n                    <input\n                      // autoComplete=\"off\"\n                      name=\"password\"\n                      type=\"password\"\n                      placeholder={t(\"auth.enterPassword\")}\n                      onChange={handleChange}\n                      className={\n                        errors.password && touched.password\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                    />\n                  </div>\n                  {errors.password && touched.password && (\n                    <span className=\"input-error-msg\">\n                      {t(`auth.validationMsgs.${[errors.password]}`)}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <div className=\"forpass\">\n                <h4>\n                  <Link\n                    href=\"/forgot-password\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      history.push(\"/forgot-password\");\n                    }}\n                  >\n                    {`${t(\"auth.forgotPassword\")}`}\n                  </Link>\n                </h4>\n              </div>\n              <div\n                className=\"loginbtn\"\n                onClick={() => {\n                  handleSubmit();\n                }}\n              >\n                <Link\n                  onClick={(e) => {\n                    e.preventDefault();\n                  }}\n                  href=\"login\"\n                >\n                  {`${t(\"auth.login\")}`}\n                  {/* <ButtonLoader show={isLoggingStatus === \"loading\"} /> */}\n                </Link>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nexport default withCountry(InnerForm);\n","import { Image, Link, BuyRadarLogo } from \"globalComponents/elements\";\nimport LoginBannerImg from \"assets/images/login/rightimg.png\";\nimport LoginForm from \"./components/loginForm\";\nimport { useHistory } from \"react-router-dom\";\nimport { loginThunk } from \"../authThunks\";\nimport { loginType, DEVICE_TYPE_WEB } from \"app/constants\";\nimport { FullPageLoader } from \"globalComponents/loaders\";\nimport { isLoggingLoaderSelector } from \"features/auth/authSelectors\";\nimport { getVisiterId } from \"app/fingerprint\";\nimport { useEffect } from \"react\";\nimport { useAppSelector, useAppDispatch } from \"app/hooks\";\nimport { refreshErrorMsgs } from \"features/auth/authSlice\";\nimport TranslatedText from \"components/translatedText\";\nimport loadable from \"@loadable/component\";\nimport { getMyLatLong } from \"utils/location\";\nconst SocialLogin = loadable(\n  () => import(/* webpackChunkName: \"social-login\" */ \"../socialLogin\")\n);\n\nconst Login = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const isLoggingLoader = useAppSelector(isLoggingLoaderSelector);\n\n  const loginHandler = async ({ values }: { values: any }) => {\n    let locationData: any = localStorage.getItem(\"geolocation\");\n    if (locationData) {\n      locationData = JSON.parse(locationData);\n    }\n    const res = await dispatch(\n      loginThunk({\n        body: {\n          ...values,\n          visitor_id: getVisiterId(),\n          login_type: loginType.LOGIN_WITH_EMAIL,\n          device_type: DEVICE_TYPE_WEB,\n\n          // country_code: locationData.countryCode,\n          // country_name: locationData.country,\n          location_longitude: locationData?.longitude.toString(),\n          location_latitude: locationData?.latitude.toString(),\n        },\n      })\n    );\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(refreshErrorMsgs());\n    };\n  }, []);\n\n  return (\n    <section className=\"loginsec loginsec1\">\n      {isLoggingLoader ? <FullPageLoader /> : null}\n      <div className=\"custom-container\">\n        <div className=\"loginlogo\">\n          <Link\n            href=\"/\"\n            onClick={(e) => {\n              e.preventDefault();\n              history.push(\"/\");\n            }}\n          >\n            <BuyRadarLogo />\n          </Link>\n        </div>\n        {/* <div className=\"heading\">\n          <h2>Welcome!</h2>\n        </div> */}\n        <div className=\"loginoter\">\n          <div className=\"login-lft\">\n            <h3 className=\"login-hdng\">\n              <TranslatedText text=\"auth.loginHereToContinue\" />\n            </h3>\n            <LoginForm loginHandler={loginHandler} />\n            <SocialLogin />\n            <div className=\"registernow\">\n              <h4>\n                <TranslatedText text=\"auth.dontHaveAccount\" />{\" \"}\n                <Link\n                  href=\"/create-account\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    history.push(\"/create-account\");\n                  }}\n                >\n                  <TranslatedText text=\"auth.registerNow\" />{\" \"}\n                </Link>\n              </h4>\n            </div>\n          </div>\n          <div className=\"login-rght\">\n            <Image src={LoginBannerImg} alt=\"login-buyradar-banner\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Login;\n","import { BeatLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\n\nconst override = css`\n  margin-left: 5px;\n  margin-top: 9px;\n`;\n\ninterface ButtonLoaderProps {\n  show: boolean;\n  color?: string;\n  size?: number;\n}\n\nexport const ButtonLoader = ({ show, color, size }: ButtonLoaderProps) => {\n  return (\n    <BeatLoader\n      size={size ? size : 10}\n      color={color ? color : \"#fff\"}\n      loading={show}\n      css={override}\n    />\n  );\n};\n\nexport const FullPageLoader = () => {\n  return (\n    <div className=\"full-page-loader\">\n      <BeatLoader size=\"20px\" color=\"#6b4eaf\" />\n    </div>\n  );\n};\n","import { object, SchemaOf, string, ref, number } from 'yup';\nimport moment from 'moment';\n\ninterface loginSchemaInterface {\n  email: string;\n  password: string;\n}\n\ninterface forgotPasswordInterface {\n  email: string;\n}\n\ninterface registerSchemaInterface {\n  email: string;\n  password: string;\n  username: string;\n  confirm_password: string;\n}\ninterface resetPasswordInterface {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\ninterface editProfileInterface {\n  username: string | undefined;\n  date_of_birth: string | undefined;\n  gender: string | undefined;\n}\n\nexport interface addAddressInterface {\n  full_name: string | undefined;\n  phone: string | undefined;\n  address_province: string | undefined,\n  address_city: string | undefined,\n  address_zip_code: string | undefined,\n  address: string | undefined,\n  // default_shipping: number | undefined,\n  // default_billing: number | undefined\n}\n\nexport interface targetPriceInterface {\n  min: string | undefined,\n  max: string | undefined\n}\nexport interface incorrectPriceInterface {\n  price: string | undefined\n}\n\nexport const loginValidationSchema: SchemaOf<loginSchemaInterface> = object({\n  email: string().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().required(\"Password is required\"),\n});\n\nexport const registerValidationSchema: SchemaOf<registerSchemaInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  username: string().trim().max(15, \"Username should not be longer than 15 characters\").required(\"Name is required\"),\n  password: string().trim().min(8, \"Password must be at least 8 characters\").max(20, \"Password should not be longer than 20 characters\").required(\"Password is required\"),\n  confirm_password: string().trim().required(\"Confirm Password is required\").oneOf([ref('password'), null], 'Passwords must match')\n});\n\nexport const forgotPasswordValidationSchema: SchemaOf<forgotPasswordInterface> = object({\n  email: string().trim().required(\"Email is required.\").email(\"Enter valid email.\"),\n});\n\nexport const resetPasswordSchema: SchemaOf<resetPasswordInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().trim().required(\"Password is required\"),\n  password_confirmation: string().trim().oneOf([ref('password'), null], 'Passwords must match').required(\"Re enter your password\")\n});\n\nexport const editProfileSchema: SchemaOf<editProfileInterface> = object({\n  username: string().trim().min(3, 'Username must be at least 3 characters').required('Username is required'),\n  date_of_birth: string()\n    .test(\n      \"date_of_birth\",\n      \"Invalid date of birth\",\n      value => {\n        return moment().diff(moment(value), 'days') >= 1;\n      }\n    ),\n  gender: string().trim().required('Select gender').oneOf(['male', 'female'], 'Select gender'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n});\n\nexport const addAddressSchema: SchemaOf<addAddressInterface> = object({\n  full_name: string().trim().min(3, 'Full Name must be at least 3 characters').max(15, 'Full Name should not be larger than 15 characters long').required('Full Name is required'),\n  // phone: string().trim().min(6, \"Phone should be atleast 6 characters long\").max(25, \"Phone should not be larger than 25 characters long\").required('Phone is required'),\n  address_province: string().trim().min(3, 'Province must be at least 3 characters').max(50, 'Address province should not be larger than 50 characters long').required('Province is required'),\n  address_city: string().trim().min(3, 'City must be at least 3 characters').max(50, 'Address city should not be larger than 50 characters long').required('City is required'),\n  address_zip_code: string().trim().min(5, 'Zip Code must be at least 5 characters').max(10, 'Address zip code should not be larger than 10 characters long').required('Zip Code is required'),\n  address: string().trim().min(4, 'Address must be at least 4 characters').max(50, 'Address should not be larger than 50 characters long').required('Address is required'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n  // default_shipping: number().oneOf([0, 1]),\n  // default_billing: number().oneOf([0, 1]),\n});\n\nexport const targetPriceSchema: SchemaOf<targetPriceInterface> = object({\n  min: string().trim(),\n  max: string().trim().required('Maximum price is required'),\n}) \nexport const incorrectPriceSchema: SchemaOf<incorrectPriceInterface> = object({\n  price: string().trim().required(\"Report price is required\"),\n}) \n"],"names":["withCountry","loginHandler","countryName","countryCode","history","useHistory","useAppSelector","selectLoginState","isLoggedIn","isLoggingStatus","loggingErrorMsg","useEffect","push","t","useTranslation","initialValues","email","password","validationSchema","loginValidationSchema","onSubmit","values","country_code","country_name","touched","errors","handleChange","handleSubmit","onKeyDown","e","key","className","name","type","placeholder","onChange","href","onClick","preventDefault","SocialLogin","loadable","dispatch","useAppDispatch","isLoggingLoader","isLoggingLoaderSelector","locationData","localStorage","getItem","JSON","parse","loginThunk","body","visitor_id","getVisiterId","login_type","loginType","device_type","DEVICE_TYPE_WEB","location_longitude","longitude","toString","location_latitude","latitude","refreshErrorMsgs","text","src","LoginBannerImg","alt","override","css","ButtonLoader","show","color","size","BeatLoader","loading","FullPageLoader","object","string","required","registerValidationSchema","trim","username","max","min","confirm_password","oneOf","ref","forgotPasswordValidationSchema","resetPasswordSchema","password_confirmation","editProfileSchema","date_of_birth","test","value","moment","diff","gender","phone","addAddressSchema","full_name","address_province","address_city","address_zip_code","address","targetPriceSchema","incorrectPriceSchema","price"],"sourceRoot":""}