{"version":3,"file":"static/js/forgot-password.234627fe.chunk.js","mappings":"ySA+GA,EAnG2B,SAAC,GAA6C,IAA3CA,EAA0C,EAA1CA,eACtBC,GAAUC,EAAAA,EAAAA,MAChB,GAKIC,EAAAA,EAAAA,GAAeC,EAAAA,IAJjBC,EADF,EACEA,qBACAC,EAFF,EAEEA,sBACAC,EAHF,EAGEA,uBACAC,EAJF,EAIEA,wBAGF,OACE,+BACE,SAAC,KAAD,CACEC,oBAAoB,EACpBC,cAAe,CACbC,MAAO,IAETC,iBAAkBC,EAAAA,GAClBC,SAAQ,yCAAE,WAAOC,EAAQC,GAAf,sEACRhB,EAAe,CAAEe,OAAAA,EAAQE,SAAUD,IAD3B,2CAAF,wDANV,SAUG,YAA8D,IAA3DE,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,OAAQJ,EAAyC,EAAzCA,OAAQK,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aACzC,OACE,UAAC,KAAD,WAC4B,WAAzBhB,GACC,gBAAKiB,UAAU,yBAAf,SACGf,IAED,KACHC,IAA4BF,GAC3B,gBAAKgB,UAAU,2BAAf,SACGf,IAED,MACJ,gBAAKe,UAAU,eAAf,UACE,iBAAKA,UAAU,aAAf,WACE,gBAAKA,UAAU,wBAAf,UACE,kBACEC,KAAK,QACLC,KAAK,OACLC,YAAY,cACZC,SAAUN,EACVO,MAAOZ,EAAOJ,MACdW,UACEH,EAAOR,OAASO,EAAQP,MACpB,qBACA,OAITQ,EAAOR,OAASO,EAAQP,QACvB,iBAAMW,UAAU,kBAAhB,SAAmCH,EAAOR,cAIhD,gBAAKW,UAAU,UAAf,UACE,kDACwB,KACtB,SAAC,KAAD,CACEM,KAAK,UACLC,QAAS,SAACC,GACRA,EAAEC,iBACF9B,EAAQ+B,KAAK,WAJjB,yBAWJ,gBACEV,UAAS,UAEH,wBAGNO,QAAS,WACsB,YAAzBxB,GACFgB,KARN,UAYE,UAAC,KAAD,CACEQ,QAAS,SAACC,GACRA,EAAEC,kBAEJH,KAAK,kBAJP,oBAOE,SAAC,IAAD,CAAcK,KAA+B,YAAzB5B,kB,8BC7BtC,EA7DuB,WACrB,IAAMJ,GAAUC,EAAAA,EAAAA,MACVgC,GAAWC,EAAAA,EAAAA,KAyBjB,OANAC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLF,GAASG,EAAAA,EAAAA,UAEV,KAGD,oBAASf,UAAU,qBAAnB,UACE,iBAAKA,UAAU,mBAAf,WACE,gBAAKA,UAAU,UAAf,UACE,wCAEF,iBAAKA,UAAU,YAAf,WACE,iBAAKA,UAAU,YAAf,WACE,eAAIA,UAAU,aAAd,qCACA,SAAC,EAAD,CAAoBtB,eAhCA,SAAC,GAMxB,IALLe,EAKI,EALJA,OACAE,EAII,EAJJA,SAKAiB,GACEI,EAAAA,EAAAA,IAAoB,CAClBC,MAAK,UACAxB,GAELE,SAAAA,SAqBI,gBAAKK,UAAU,cAAf,UACE,mDACyB,KACvB,UAAC,KAAD,CACEM,KAAK,kBACLC,QAAS,SAACC,GACRA,EAAEC,iBACF9B,EAAQ+B,KAAK,oBAJjB,yBAOe,gBAKrB,gBAAKV,UAAU,aAAf,UACE,SAAC,KAAD,CAAOkB,IAAKC,EAAgBC,IAAI,sC,wHC5DtCC,GAAWC,EAAAA,EAAAA,KAAH,iEAWDC,EAAe,SAAC,GAA8C,IAA5CZ,EAA2C,EAA3CA,KAAMa,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAC1C,OACE,SAAC,EAAAC,WAAD,CACED,KAAMA,GAAc,GACpBD,MAAOA,GAAgB,OACvBG,QAAShB,EACTW,IAAKD,KAKEO,EAAiB,WAC5B,OACE,gBAAK5B,UAAU,mBAAf,UACE,SAAC,EAAA0B,WAAD,CAAYD,KAAK,OAAOD,MAAM,gB,8PCqBvBK,GAAwDC,EAAAA,EAAAA,IAAO,CAC1EzC,OAAO0C,EAAAA,EAAAA,MAASC,SAAS,qBAAqB3C,MAAM,qBACpD4C,UAAUF,EAAAA,EAAAA,MAASC,SAAS,0BAGjBE,GAA8DJ,EAAAA,EAAAA,IAAO,CAChFzC,OAAO0C,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAAqB3C,MAAM,qBAC3D+C,UAAUL,EAAAA,EAAAA,MAASI,OAAOE,IAAI,GAAI,oDAAoDL,SAAS,oBAC/FC,UAAUF,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,0CAA0CD,IAAI,GAAI,oDAAoDL,SAAS,wBAChJO,kBAAkBR,EAAAA,EAAAA,MAASI,OAAOH,SAAS,gCAAgCQ,MAAM,EAACC,EAAAA,EAAAA,IAAI,YAAa,MAAO,0BAG/FlD,GAAoEuC,EAAAA,EAAAA,IAAO,CACtFzC,OAAO0C,EAAAA,EAAAA,MAASI,OAAOH,SAAS,sBAAsB3C,MAAM,wBAGjDqD,GAAwDZ,EAAAA,EAAAA,IAAO,CAC1EzC,OAAO0C,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAAqB3C,MAAM,qBAC3D4C,UAAUF,EAAAA,EAAAA,MAASI,OAAOH,SAAS,wBACnCW,uBAAuBZ,EAAAA,EAAAA,MAASI,OAAOK,MAAM,EAACC,EAAAA,EAAAA,IAAI,YAAa,MAAO,wBAAwBT,SAAS,4BAG5FY,GAAoDd,EAAAA,EAAAA,IAAO,CACtEM,UAAUL,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,0CAA0CN,SAAS,wBACpFa,eAAed,EAAAA,EAAAA,MACZe,KACC,gBACA,yBACA,SAAAzC,GACE,OAAO0C,MAASC,KAAKD,IAAO1C,GAAQ,SAAW,KAGrD4C,QAAQlB,EAAAA,EAAAA,MAASI,OAAOH,SAAS,iBAAiBQ,MAAM,CAAC,OAAQ,UAAW,iBAC5EU,OAAOnB,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAChCmB,cAAcpB,EAAAA,EAAAA,MAASI,OAAOH,SAAS,8BAG5BoB,GAAkDtB,EAAAA,EAAAA,IAAO,CACpEuB,WAAWtB,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,2CAA2CD,IAAI,GAAI,0DAA0DL,SAAS,yBAExJsB,kBAAkBvB,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,0CAA0CD,IAAI,GAAI,iEAAiEL,SAAS,wBACrKuB,cAAcxB,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,sCAAsCD,IAAI,GAAI,6DAA6DL,SAAS,oBACzJwB,kBAAkBzB,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,0CAA0CD,IAAI,GAAI,iEAAiEL,SAAS,wBACrKyB,SAAS1B,EAAAA,EAAAA,MAASI,OAAOG,IAAI,EAAG,yCAAyCD,IAAI,GAAI,wDAAwDL,SAAS,uBAClJkB,OAAOnB,EAAAA,EAAAA,MAASI,OAAOH,SAAS,qBAChCmB,cAAcpB,EAAAA,EAAAA,MAASI,OAAOH,SAAS,8BAK5B0B,GAAoD5B,EAAAA,EAAAA,IAAO,CACtEQ,KAAKP,EAAAA,EAAAA,MAASI,OACdE,KAAKN,EAAAA,EAAAA,MAASI,OAAOH,SAAS,+BAEnB2B,GAA0D7B,EAAAA,EAAAA,IAAO,CAC5E8B,OAAO7B,EAAAA,EAAAA,MAASI,OAAOH,SAAS,+B","sources":["features/auth/forgotPassword/components/forgotPasswordForm.tsx","features/auth/forgotPassword/index.tsx","globalComponents/loaders/index.tsx","utils/validations.ts"],"sourcesContent":["import { Formik, Form } from \"formik\";\nimport { Link } from \"globalComponents/elements\";\nimport { useHistory } from \"react-router-dom\";\nimport { forgotPasswordValidationSchema } from \"utils/validations\";\nimport { useAppSelector } from \"app/hooks\";\nimport { selectForgotPasswordState } from \"features/auth/authSelectors\";\nimport { ButtonLoader } from \"globalComponents/loaders\";\n\ninterface ForgotPasswordProps {\n  forgotPassword: (a: any) => void;\n}\n\nconst ForgorPasswordForm = ({ forgotPassword }: ForgotPasswordProps) => {\n  const history = useHistory();\n  const {\n    forgotPasswordStatus,\n    isForgotPasswordError,\n    forgotPasswordErrorMsg,\n    isForgotPasswordSuccess,\n  } = useAppSelector(selectForgotPasswordState);\n\n  return (\n    <>\n      <Formik\n        enableReinitialize={true}\n        initialValues={{\n          email: \"\",\n        }}\n        validationSchema={forgotPasswordValidationSchema}\n        onSubmit={async (values, actions) => {\n          forgotPassword({ values, callback: actions });\n        }}\n      >\n        {({ touched, errors, values, handleChange, handleSubmit }) => {\n          return (\n            <Form>\n              {forgotPasswordStatus === \"failed\" ? (\n                <div className=\"api-resposne-error-msg\">\n                  {forgotPasswordErrorMsg}\n                </div>\n              ) : null}\n              {isForgotPasswordSuccess && !isForgotPasswordError ? (\n                <div className=\"api-resposne-success-msg\">\n                  {forgotPasswordErrorMsg}\n                </div>\n              ) : null}\n              <div className=\"loginput-otr\">\n                <div className=\"login-form\">\n                  <div className=\"logininput loginemail\">\n                    <input\n                      name=\"email\"\n                      type=\"text\"\n                      placeholder=\"Enter email\"\n                      onChange={handleChange}\n                      value={values.email}\n                      className={\n                        errors.email && touched.email\n                          ? \"input-error-border\"\n                          : \"\"\n                      }\n                    />\n                  </div>\n                  {errors.email && touched.email && (\n                    <span className=\"input-error-msg\">{errors.email}</span>\n                  )}\n                </div>\n              </div>\n              <div className=\"forpass\">\n                <h4>\n                  Already have account?{\" \"}\n                  <Link\n                    href=\"/submit\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      history.push(\"/login\");\n                    }}\n                  >\n                    Login\n                  </Link>\n                </h4>\n              </div>\n              <div\n                className={`${\n                  forgotPasswordStatus === \"loading\"\n                    ? \"loginbtn disable-btn\"\n                    : \"loginbtn disable-btn\"\n                }`}\n                onClick={() => {\n                  if (forgotPasswordStatus !== \"loading\") {\n                    handleSubmit();\n                  }\n                }}\n              >\n                <Link\n                  onClick={(e) => {\n                    e.preventDefault();\n                  }}\n                  href=\"forgot-password\"\n                >\n                  Submit\n                  <ButtonLoader show={forgotPasswordStatus === \"loading\"} />\n                </Link>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nexport default ForgorPasswordForm;\n","import { Image, Link } from \"globalComponents/elements\";\nimport LoginBannerImg from \"assets/images/login/rightimg.png\";\nimport ForgotPasswordForm from \"./components/forgotPasswordForm\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAppDispatch } from \"app/hooks\";\nimport { forgotPasswordThunk } from \"../authThunks\";\nimport { refreshErrorMsgs } from \"features/auth/authSlice\";\nimport { useEffect } from \"react\";\n\n\nconst ForgotPassword = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const forgotPasswordHandler = ({\n    values,\n    callback,\n  }: {\n    values: any;\n    callback: any;\n  }) => {\n    dispatch(\n      forgotPasswordThunk({\n        body: {\n          ...values,\n        },\n        callback,\n      })\n    );\n  };\n\n  useEffect(() => {\n    return () => {\n      dispatch(refreshErrorMsgs());\n    };\n  }, []);\n\n  return (\n    <section className=\"loginsec loginsec1\">   \n      <div className=\"custom-container\">   \n        <div className=\"heading\">\n          <h2>Welcome!</h2>\n        </div>\n        <div className=\"loginoter\">\n          <div className=\"login-lft\">\n            <h3 className=\"login-hdng\">Enter registered email</h3>\n            <ForgotPasswordForm forgotPassword={forgotPasswordHandler} />\n            <div className=\"registernow\">\n              <h4>\n                Don't have an account?{\" \"}\n                <Link\n                  href=\"/create-account\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    history.push(\"/create-account\");\n                  }}\n                >      \n                  Register now{\" \"}\n                </Link>\n              </h4>\n            </div>\n          </div>\n          <div className=\"login-rght\">\n            <Image src={LoginBannerImg} alt=\"login-buyradar-banner\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default ForgotPassword;\n","import { BeatLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\n\nconst override = css`\n  margin-left: 5px;\n  margin-top: 9px;\n`;\n\ninterface ButtonLoaderProps {\n  show: boolean;\n  color?: string;\n  size?: number;\n}\n\nexport const ButtonLoader = ({ show, color, size }: ButtonLoaderProps) => {\n  return (\n    <BeatLoader\n      size={size ? size : 10}\n      color={color ? color : \"#fff\"}\n      loading={show}\n      css={override}\n    />\n  );\n};\n\nexport const FullPageLoader = () => {\n  return (\n    <div className=\"full-page-loader\">\n      <BeatLoader size=\"20px\" color=\"#6b4eaf\" />\n    </div>\n  );\n};\n","import { object, SchemaOf, string, ref, number } from 'yup';\nimport moment from 'moment';\n\ninterface loginSchemaInterface {\n  email: string;\n  password: string;\n}\n\ninterface forgotPasswordInterface {\n  email: string;\n}\n\ninterface registerSchemaInterface {\n  email: string;\n  password: string;\n  username: string;\n  confirm_password: string;\n}\ninterface resetPasswordInterface {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\ninterface editProfileInterface {\n  username: string | undefined;\n  date_of_birth: string | undefined;\n  gender: string | undefined;\n}\n\nexport interface addAddressInterface {\n  full_name: string | undefined;\n  phone: string | undefined;\n  address_province: string | undefined,\n  address_city: string | undefined,\n  address_zip_code: string | undefined,\n  address: string | undefined,\n  // default_shipping: number | undefined,\n  // default_billing: number | undefined\n}\n\nexport interface targetPriceInterface {\n  min: string | undefined,\n  max: string | undefined\n}\nexport interface incorrectPriceInterface {\n  price: string | undefined\n}\n\nexport const loginValidationSchema: SchemaOf<loginSchemaInterface> = object({\n  email: string().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().required(\"Password is required\"),\n});\n\nexport const registerValidationSchema: SchemaOf<registerSchemaInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  username: string().trim().max(15, \"Username should not be longer than 15 characters\").required(\"Name is required\"),\n  password: string().trim().min(8, \"Password must be at least 8 characters\").max(20, \"Password should not be longer than 20 characters\").required(\"Password is required\"),\n  confirm_password: string().trim().required(\"Confirm Password is required\").oneOf([ref('password'), null], 'Passwords must match')\n});\n\nexport const forgotPasswordValidationSchema: SchemaOf<forgotPasswordInterface> = object({\n  email: string().trim().required(\"Email is required.\").email(\"Enter valid email.\"),\n});\n\nexport const resetPasswordSchema: SchemaOf<resetPasswordInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().trim().required(\"Password is required\"),\n  password_confirmation: string().trim().oneOf([ref('password'), null], 'Passwords must match').required(\"Re enter your password\")\n});\n\nexport const editProfileSchema: SchemaOf<editProfileInterface> = object({\n  username: string().trim().min(3, 'Username must be at least 3 characters').required('Username is required'),\n  date_of_birth: string()\n    .test(\n      \"date_of_birth\",\n      \"Invalid date of birth\",\n      value => {\n        return moment().diff(moment(value), 'days') >= 1;\n      }\n    ),\n  gender: string().trim().required('Select gender').oneOf(['male', 'female'], 'Select gender'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n});\n\nexport const addAddressSchema: SchemaOf<addAddressInterface> = object({\n  full_name: string().trim().min(3, 'Full Name must be at least 3 characters').max(15, 'Full Name should not be larger than 15 characters long').required('Full Name is required'),\n  // phone: string().trim().min(6, \"Phone should be atleast 6 characters long\").max(25, \"Phone should not be larger than 25 characters long\").required('Phone is required'),\n  address_province: string().trim().min(3, 'Province must be at least 3 characters').max(50, 'Address province should not be larger than 50 characters long').required('Province is required'),\n  address_city: string().trim().min(3, 'City must be at least 3 characters').max(50, 'Address city should not be larger than 50 characters long').required('City is required'),\n  address_zip_code: string().trim().min(5, 'Zip Code must be at least 5 characters').max(10, 'Address zip code should not be larger than 10 characters long').required('Zip Code is required'),\n  address: string().trim().min(4, 'Address must be at least 4 characters').max(50, 'Address should not be larger than 50 characters long').required('Address is required'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n  // default_shipping: number().oneOf([0, 1]),\n  // default_billing: number().oneOf([0, 1]),\n});\n\nexport const targetPriceSchema: SchemaOf<targetPriceInterface> = object({\n  min: string().trim(),\n  max: string().trim().required('Maximum price is required'),\n}) \nexport const incorrectPriceSchema: SchemaOf<incorrectPriceInterface> = object({\n  price: string().trim().required(\"Report price is required\"),\n}) \n"],"names":["forgotPassword","history","useHistory","useAppSelector","selectForgotPasswordState","forgotPasswordStatus","isForgotPasswordError","forgotPasswordErrorMsg","isForgotPasswordSuccess","enableReinitialize","initialValues","email","validationSchema","forgotPasswordValidationSchema","onSubmit","values","actions","callback","touched","errors","handleChange","handleSubmit","className","name","type","placeholder","onChange","value","href","onClick","e","preventDefault","push","show","dispatch","useAppDispatch","useEffect","refreshErrorMsgs","forgotPasswordThunk","body","src","LoginBannerImg","alt","override","css","ButtonLoader","color","size","BeatLoader","loading","FullPageLoader","loginValidationSchema","object","string","required","password","registerValidationSchema","trim","username","max","min","confirm_password","oneOf","ref","resetPasswordSchema","password_confirmation","editProfileSchema","date_of_birth","test","moment","diff","gender","phone","country_code","addAddressSchema","full_name","address_province","address_city","address_zip_code","address","targetPriceSchema","incorrectPriceSchema","price"],"sourceRoot":""}