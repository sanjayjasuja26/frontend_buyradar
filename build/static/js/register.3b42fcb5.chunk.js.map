{"version":3,"file":"static/js/register.3b42fcb5.chunk.js","mappings":"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","sources":["features/auth/register/components/registerForm.tsx","features/auth/register/index.tsx","features/auth/socialLogin/index.tsx","globalComponents/loaders/index.tsx","utils/validations.ts"],"sourcesContent":["import { Formik, Form } from \"formik\";\nimport { Link } from \"globalComponents/elements\";\nimport { registerValidationSchema } from \"utils/validations\";\nimport { useEffect } from \"react\";\nimport { selectRegisterState } from \"../../authSelectors\";\nimport { useAppSelector } from \"app/hooks\";\nimport withCountry from \"hoc/countryName\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface RegisterFormProps {\n  registerHandler: (a: any) => void;\n  countryName: string;\n  countryCode: string;\n}\nconst RegisterForm = ({\n  registerHandler,\n  countryName,\n  countryCode,\n}: RegisterFormProps) => {\n  const { t } = useTranslation();\n  const {\n    isRegisterSuccess,\n    isRegisterStatus,\n    isRegisterError,\n    registerErrorMsg,\n  } = useAppSelector(selectRegisterState);\n  useEffect(() => {}, [isRegisterSuccess]);\n\n  return (\n    <Formik\n      initialValues={{\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        confirm_password: \"\",\n      }}\n      enableReinitialize={true}\n      validationSchema={registerValidationSchema}\n      onSubmit={async (values, actions) => {\n        registerHandler({\n          values: {\n            ...values,\n            country_code: countryCode,\n            country_name: countryName,\n          },\n          actions,\n        });\n      }}\n    >\n      {({ touched, errors, values, handleChange, handleSubmit }) => {\n        // console.log(\"----errors\", errors);\n        return (\n          <Form\n            onSubmit={handleSubmit}\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleSubmit();\n              }\n            }}\n          >\n            {isRegisterStatus === \"failed\" ? (\n              <div className=\"api-resposne-error-msg\">{registerErrorMsg}</div>\n            ) : null}\n            {isRegisterSuccess && !isRegisterError ? (\n              <div className=\"api-resposne-success-msg\">{registerErrorMsg}</div>\n            ) : null}\n            <div className=\"login-form\">\n              <div className=\"loginput-otr\">\n                <div className=\"logininput username\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter your name\"\n                    name=\"username\"\n                    onChange={handleChange}\n                    value={values.username}\n                    className={\n                      errors.username && touched.username\n                        ? \"input-error-border\"\n                        : \"\"\n                    }\n                  />\n                </div>\n                {errors.username && touched.username && (\n                  <span className=\"input-error-msg\">\n                    {t(`auth.validationMsgs.${[errors.username]}`)}\n                  </span>\n                )}\n              </div>\n              <div className=\"loginput-otr\">\n                <div className=\"logininput loginemail\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter email\"\n                    name=\"email\"\n                    value={values.email}\n                    onChange={handleChange}\n                    className={\n                      errors.email && touched.email ? \"input-error-border\" : \"\"\n                    }\n                  />\n                </div>\n                {errors.email && touched.email && (\n                  <span className=\"input-error-msg\">\n                    {t(`auth.validationMsgs.${[errors.email]}`)}\n                  </span>\n                )}\n              </div>\n              <div className=\"loginput-otr\">\n                <div className=\"logininput loginpass\">\n                  <input\n                    type=\"password\"\n                    placeholder=\"Enter Password\"\n                    name=\"password\"\n                    onChange={handleChange}\n                    value={values.password}\n                    className={\n                      errors.password && touched.password\n                        ? \"input-error-border\"\n                        : \"\"\n                    }\n                  />\n                </div>\n                {errors.password && touched.password && (\n                  <span className=\"input-error-msg\">\n                    {t(`auth.validationMsgs.${[errors.password]}`)}\n                  </span>\n                )}\n              </div>\n              <div className=\"loginput-otr\">\n                <div className=\"logininput loginpass\">\n                  <input\n                    type=\"password\"\n                    placeholder=\"Re-enter password\"\n                    name=\"confirm_password\"\n                    onChange={handleChange}\n                    value={values.confirm_password}\n                    className={\n                      errors.confirm_password && touched.confirm_password\n                        ? \"input-error-border\"\n                        : \"\"\n                    }\n                  />\n                </div>\n                {errors.confirm_password && touched.confirm_password && (\n                  <span className=\"input-error-msg\">\n                    {t(`auth.validationMsgs.${[errors.confirm_password]}`)}\n                  </span>\n                )}\n              </div>\n            </div>\n            <div\n              className=\"loginbtn\"\n              onClick={(e) => {\n                e.preventDefault();\n                handleSubmit();\n              }}\n            >\n              <Link onClick={(e) => e.preventDefault()} href=\"create-account\">\n                Create Account\n              </Link>\n            </div>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withCountry(RegisterForm);\n","import { Link, BuyRadarLogo } from \"globalComponents/elements\";\nimport { useHistory } from \"react-router-dom\";\nimport RegisterForm from \"./components/registerForm\";\nimport { registerThunk } from \"../authThunks\";\nimport { useAppDispatch } from \"app/hooks\";\nimport SocialLogin from \"../socialLogin\";\nimport { DEVICE_TYPE_WEB } from \"app/constants\";\nimport { isRegisterLoaderSelector } from \"../authSelectors\";\nimport { useAppSelector } from \"app/hooks\";\nimport { FullPageLoader } from \"globalComponents/loaders\";\nimport { getVisiterId } from \"app/fingerprint\";\nimport { refreshErrorMsgs } from \"features/auth/authSlice\";\nimport { useEffect } from \"react\";\nimport TranslatedText from \"components/translatedText\";\n\nconst Register = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const isRegisterLoader = useAppSelector(isRegisterLoaderSelector);\n\n  const registerHandler = ({\n    values,\n    actions,\n  }: {\n    values: any;\n    actions: any;\n  }) => {\n    let locationData: any = localStorage.getItem(\"geolocation\");\n    if (locationData) {\n      locationData = JSON.parse(locationData);\n    }\n    dispatch(\n      registerThunk({\n        body: {\n          ...values,\n          visitor_id: getVisiterId(),\n          device_type: DEVICE_TYPE_WEB,\n          // country_code: \"IN\",\n          // country_name: \"India\",\n\n          // country_code: locationData.countryCode,\n          // country_name: locationData.country,\n          location_longitude: locationData?.longitude.toString(),\n          location_latitude: locationData?.latitude.toString(),\n        },\n        callback: actions,\n      })\n    );\n    // });\n  };\n  useEffect(() => {\n    return () => {\n      dispatch(refreshErrorMsgs());\n    };\n  }, []);\n\n  return (\n    <section className=\"loginsec createaccount-sec\">\n      {isRegisterLoader ? <FullPageLoader /> : null}\n      <div className=\"custom-container\">\n        <div className=\"loginlogo\">\n          <Link\n            href=\"/\"\n            onClick={(e) => {\n              e.preventDefault();\n              history.push(\"/\");\n            }}\n          >\n            <BuyRadarLogo />\n          </Link>\n        </div>\n        {/* <div className=\"heading\">\n          <h2>Create account</h2>\n        </div> */}\n        <div className=\"loginoter\">\n          <div className=\"login-lft\">\n            <h3 className=\"login-hdng\">\n              <TranslatedText text=\"auth.fillDetailsCreateNewAccount\" />\n            </h3>\n            <RegisterForm registerHandler={registerHandler} />\n            <SocialLogin />\n            <div className=\"registernow\">\n              <h4>\n                <TranslatedText text=\"auth.alreadyHaveAccount\" />{\" \"}\n                <Link\n                  href=\"/login\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    history.push(\"/login\");\n                  }}\n                >\n                  <TranslatedText text=\"auth.login\" />\n                </Link>\n              </h4>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Register;\n","import FacebookLogin from \"react-facebook-login\";\nimport LoginWithFbIconImg from \"assets/images/login/fb.png\";\nimport { Image, Link } from \"globalComponents/elements\";\nimport { useHistory } from \"react-router-dom\";\nimport { loginThunk } from \"../authThunks\";\nimport { useAppDispatch } from \"app/hooks\";\nimport {\n  loginType,\n  FACEBOOK_APP_ID,\n  DEVICE_TYPE_WEB,\n  GOOGLE_APP_CLIENT_ID,\n} from \"app/constants\";\nimport { selectLoginState } from \"../authSelectors\";\nimport { useEffect } from \"react\";\nimport { useAppSelector } from \"app/hooks\";\nimport { GoogleLogin } from \"react-google-login\";\nimport { getVisiterId } from \"app/fingerprint\";\nimport TranslatedText from \"components/translatedText\";\ninterface SocialLoginInterface {\n  loginHandler?: (e: any) => void;\n}\n\nconst SocialLogin = ({}: SocialLoginInterface) => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n\n  const { isLoggedIn } = useAppSelector(selectLoginState);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      history.push(\"/home\");\n    }\n  }, [isLoggedIn, history]);\n\n  const loginHandler = ({ values }: { values: any }) => {\n    let locationData: any = localStorage.getItem(\"geolocation\");\n    if (locationData) {\n      locationData = JSON.parse(locationData);\n    }\n    dispatch(\n      loginThunk({\n        body: {\n          ...values,\n          visitor_id: getVisiterId(),\n          device_type: DEVICE_TYPE_WEB,\n          // country_code: \"IN\",\n          // country_name: \"India\",\n\n          country_code: locationData.countryCode,\n          country_name: locationData.country,\n          location_longitude: locationData?.longitude.toString(),\n          location_latitude: locationData?.latitude.toString(),\n        },\n      })\n    );\n    // });\n  };\n\n  const facebookLoginHandler = (data: any) => {\n    let username: any = {};\n    if (data.name) {\n      let name = data.name.split(\" \");\n      if (name[0]) {\n        username.first_name = name[0];\n        if (name[1]) {\n          username.last_name = name[1];\n        }\n      }\n    }\n    loginHandler({\n      values: {\n        email: data.email,\n        ...username,\n        social_id: data.userID,\n        login_type: loginType.LOGIN_WITH_FACEBOOK,\n      },\n    });\n  };\n\n  const googleLoginFailureHandler = (error: any) => {\n    console.log(\"@googleLoginFailureHandler ===error\", error);\n  };\n\n  const googleLoginSuccess = (data: any) => {\n    let username: any = {};\n    const { profileObj } = data;\n    if (profileObj.givenName || profileObj.familyName) {\n      if (profileObj.givenName) {\n        username.first_name = profileObj.givenName;\n      }\n      if (profileObj.familyName) {\n        username.last_name = profileObj.familyName;\n      }\n    } else {\n      username.first_name = profileObj.name;\n    }\n\n    loginHandler({\n      values: {\n        email: data.profileObj.email,\n        ...username,\n        social_id: data.googleId,\n        login_type: loginType.LOGIN_WITH_GOOGLE,\n      },\n    });\n  };\n\n  return (\n    <>\n      <div className=\"contiue\">\n        <h3>\n          <TranslatedText text=\"auth.orContinueWith\" />\n        </h3>\n      </div>\n      <div className=\"loginsicons\">\n        <ul>\n          <li>\n            <Link\n              href=\"/login-buyradar-with-facebook\"\n              onClick={(e) => {\n                e.preventDefault();\n              }}\n            >\n              {/* public_profile */}\n              <FacebookLogin\n                appId={FACEBOOK_APP_ID || \"\"}\n                autoLoad={false}\n                fields=\"name,email,picture\"\n                cssClass=\"my-facebook-button-class\"\n                textButton=\"\"\n                icon={\n                  <Image\n                    src={LoginWithFbIconImg}\n                    alt=\"login-buyradar-with-facebook\"\n                  />\n                }\n                callback={facebookLoginHandler}\n                scope=\"public_profile\"\n              />\n            </Link>\n          </li>\n          <li>\n            <Link\n              href=\"/login-buyradar-with-gmail\"\n              onClick={(e) => {\n                e.preventDefault();\n              }}\n            >\n              <GoogleLogin\n                clientId={GOOGLE_APP_CLIENT_ID || \"\"}\n                buttonText=\"\"\n                className=\"google_bttn\"\n                onSuccess={googleLoginSuccess}\n                onFailure={(response: any) => {\n                  googleLoginFailureHandler(true);\n                }}\n                cookiePolicy={\"single_host_origin\"}\n                responseType=\"code,token\"\n              />\n              {/* <Image\n                src={LoginWithGmailIconImg}\n                alt=\"login-buyradar-with-gmail\"\n              /> */}\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default SocialLogin;\n","import { BeatLoader } from \"react-spinners\";\nimport { css } from \"@emotion/react\";\n\nconst override = css`\n  margin-left: 5px;\n  margin-top: 9px;\n`;\n\ninterface ButtonLoaderProps {\n  show: boolean;\n  color?: string;\n  size?: number;\n}\n\nexport const ButtonLoader = ({ show, color, size }: ButtonLoaderProps) => {\n  return (\n    <BeatLoader\n      size={size ? size : 10}\n      color={color ? color : \"#fff\"}\n      loading={show}\n      css={override}\n    />\n  );\n};\n\nexport const FullPageLoader = () => {\n  return (\n    <div className=\"full-page-loader\">\n      <BeatLoader size=\"20px\" color=\"#6b4eaf\" />\n    </div>\n  );\n};\n","import { object, SchemaOf, string, ref, number } from 'yup';\nimport moment from 'moment';\n\ninterface loginSchemaInterface {\n  email: string;\n  password: string;\n}\n\ninterface forgotPasswordInterface {\n  email: string;\n}\n\ninterface registerSchemaInterface {\n  email: string;\n  password: string;\n  username: string;\n  confirm_password: string;\n}\ninterface resetPasswordInterface {\n  email: string;\n  password: string;\n  password_confirmation: string;\n}\n\ninterface editProfileInterface {\n  username: string | undefined;\n  date_of_birth: string | undefined;\n  gender: string | undefined;\n}\n\nexport interface addAddressInterface {\n  full_name: string | undefined;\n  phone: string | undefined;\n  address_province: string | undefined,\n  address_city: string | undefined,\n  address_zip_code: string | undefined,\n  address: string | undefined,\n  // default_shipping: number | undefined,\n  // default_billing: number | undefined\n}\n\nexport interface targetPriceInterface {\n  min: string | undefined,\n  max: string | undefined\n}\nexport interface incorrectPriceInterface {\n  price: string | undefined\n}\n\nexport const loginValidationSchema: SchemaOf<loginSchemaInterface> = object({\n  email: string().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().required(\"Password is required\"),\n});\n\nexport const registerValidationSchema: SchemaOf<registerSchemaInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  username: string().trim().max(15, \"Username should not be longer than 15 characters\").required(\"Name is required\"),\n  password: string().trim().min(8, \"Password must be at least 8 characters\").max(20, \"Password should not be longer than 20 characters\").required(\"Password is required\"),\n  confirm_password: string().trim().required(\"Confirm Password is required\").oneOf([ref('password'), null], 'Passwords must match')\n});\n\nexport const forgotPasswordValidationSchema: SchemaOf<forgotPasswordInterface> = object({\n  email: string().trim().required(\"Email is required.\").email(\"Enter valid email.\"),\n});\n\nexport const resetPasswordSchema: SchemaOf<resetPasswordInterface> = object({\n  email: string().trim().required(\"Email is required\").email(\"Enter valid email\"),\n  password: string().trim().required(\"Password is required\"),\n  password_confirmation: string().trim().oneOf([ref('password'), null], 'Passwords must match').required(\"Re enter your password\")\n});\n\nexport const editProfileSchema: SchemaOf<editProfileInterface> = object({\n  username: string().trim().min(3, 'Username must be at least 3 characters').required('Username is required'),\n  date_of_birth: string()\n    .test(\n      \"date_of_birth\",\n      \"Invalid date of birth\",\n      value => {\n        return moment().diff(moment(value), 'days') >= 1;\n      }\n    ),\n  gender: string().trim().required('Select gender').oneOf(['male', 'female'], 'Select gender'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n});\n\nexport const addAddressSchema: SchemaOf<addAddressInterface> = object({\n  full_name: string().trim().min(3, 'Full Name must be at least 3 characters').max(15, 'Full Name should not be larger than 15 characters long').required('Full Name is required'),\n  // phone: string().trim().min(6, \"Phone should be atleast 6 characters long\").max(25, \"Phone should not be larger than 25 characters long\").required('Phone is required'),\n  address_province: string().trim().min(3, 'Province must be at least 3 characters').max(50, 'Address province should not be larger than 50 characters long').required('Province is required'),\n  address_city: string().trim().min(3, 'City must be at least 3 characters').max(50, 'Address city should not be larger than 50 characters long').required('City is required'),\n  address_zip_code: string().trim().min(5, 'Zip Code must be at least 5 characters').max(10, 'Address zip code should not be larger than 10 characters long').required('Zip Code is required'),\n  address: string().trim().min(4, 'Address must be at least 4 characters').max(50, 'Address should not be larger than 50 characters long').required('Address is required'),\n  phone: string().trim().required(\"Phone is required\"),\n  country_code: string().trim().required(\"Country code is required\")\n  // default_shipping: number().oneOf([0, 1]),\n  // default_billing: number().oneOf([0, 1]),\n});\n\nexport const targetPriceSchema: SchemaOf<targetPriceInterface> = object({\n  min: string().trim(),\n  max: string().trim().required('Maximum price is required'),\n}) \nexport const incorrectPriceSchema: SchemaOf<incorrectPriceInterface> = object({\n  price: string().trim().required(\"Report price is required\"),\n}) \n"],"names":["withCountry","registerHandler","countryName","countryCode","t","useTranslation","useAppSelector","selectRegisterState","isRegisterSuccess","isRegisterStatus","isRegisterError","registerErrorMsg","useEffect","initialValues","username","email","password","confirm_password","enableReinitialize","validationSchema","registerValidationSchema","onSubmit","values","actions","country_code","country_name","touched","errors","handleChange","handleSubmit","onKeyDown","e","key","className","type","placeholder","name","onChange","value","onClick","preventDefault","href","history","useHistory","dispatch","useAppDispatch","isRegisterLoader","isRegisterLoaderSelector","refreshErrorMsgs","push","text","locationData","localStorage","getItem","JSON","parse","registerThunk","body","visitor_id","getVisiterId","device_type","DEVICE_TYPE_WEB","location_longitude","longitude","toString","location_latitude","latitude","callback","isLoggedIn","selectLoginState","loginHandler","loginThunk","country","appId","FACEBOOK_APP_ID","autoLoad","fields","cssClass","textButton","icon","src","alt","data","split","first_name","last_name","social_id","userID","login_type","loginType","scope","GoogleLogin","clientId","GOOGLE_APP_CLIENT_ID","buttonText","onSuccess","profileObj","givenName","familyName","googleId","onFailure","response","error","console","log","cookiePolicy","responseType","override","css","ButtonLoader","show","color","size","BeatLoader","loading","FullPageLoader","loginValidationSchema","object","string","required","trim","max","min","oneOf","ref","forgotPasswordValidationSchema","resetPasswordSchema","password_confirmation","editProfileSchema","date_of_birth","test","moment","diff","gender","phone","addAddressSchema","full_name","address_province","address_city","address_zip_code","address","targetPriceSchema","incorrectPriceSchema","price"],"sourceRoot":""}